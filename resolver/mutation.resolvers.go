package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"booking-flight-system/ent"
	"booking-flight-system/ent/airport"
	"booking-flight-system/ent/booking"
	"booking-flight-system/ent/customer"
	"booking-flight-system/ent/flight"
	"booking-flight-system/ent/member"
	graphql1 "booking-flight-system/graphql"
	"booking-flight-system/helper"
	"context"
	"errors"
	"fmt"
	"strings"
	"time"
)

// SignUp is the resolver for the sign_up field.
func (r *mutationResolver) SignUp(ctx context.Context, input ent.CreateMemberInput) (*ent.Member, error) {
	input.Password = helper.SHA256Hashing(input.Password)
	member, err := r.client.Member.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}
	r.client.Customer.Create().SetEmail(input.Email).SetPhoneNumber(input.PhoneNumber).SetFullName(input.FullName).SetCid(input.Cid).SetMemberID(member.ID).Save(ctx)
	return member, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*ent.Token, error) {
	hashPass := helper.SHA256Hashing(password)
	user, err := r.client.Member.Query().Where(member.Email(email), member.Password(hashPass)).Only(ctx)
	if err != nil {
		return nil, err
	}
	token, exp, err := r.jwtService.GenerateToken(*user)
	if err != nil {
		return nil, err
	}
	return &ent.Token{
		Token:     token,
		ExpiredAt: exp,
	}, nil
}

// Self is the resolver for the self field.
func (r *mutationResolver) Self(ctx context.Context) (*ent.Member, error) {
	email, ok := ctx.Value("user_email").(string)
	if !ok {
		return nil, errors.New("not logged in")
	}
	user, err := r.client.Member.Query().Where(member.Email(email)).Only(ctx)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// DeleteByID is the resolver for the delete_by_id field.
func (r *mutationResolver) DeleteByID(ctx context.Context, id int) (*string, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	message := "delete success"
	if err := r.client.Member.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, err
	}
	return &message, nil
}

// FindMemberByName is the resolver for the find_member_by_name field.
func (r *mutationResolver) FindMemberByName(ctx context.Context, name string) ([]*ent.Member, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	mem, err := r.client.Member.Query().Where(member.FullNameContainsFold(strings.ToLower(name))).All(ctx)
	if err != nil {
		return nil, err
	}
	return mem, nil
}

// ChangePassword is the resolver for the change_password field.
func (r *mutationResolver) ChangePassword(ctx context.Context, oldPassword string, newPassword string) (*string, error) {
	user, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin, member.MemberTypeMember)
	if err != nil {
		return nil, err
	}
	message := "success"
	if helper.SHA256Hashing(oldPassword) != user.Password {
		return nil, errors.New("password doesn't match")
	}
	user, err = user.Update().SetPassword(helper.SHA256Hashing(newPassword)).Save(ctx)
	if err != nil {
		return nil, err
	}
	return &message, nil
}

// UpdateMemberProfile is the resolver for the update_member_profile field.
func (r *mutationResolver) UpdateMemberProfile(ctx context.Context, input *ent.UpdateMemberInput) (*ent.Member, error) {
	user, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin, member.MemberTypeMember)
	if err != nil {
		return nil, err
	}
	user, err = user.Update().
		SetFullName(*input.FullName).
		SetCid(*input.Cid).
		SetPhoneNumber(*input.PhoneNumber).
		SetDob(*input.Dob).Save(ctx)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// FindMemberByEmail is the resolver for the find_member_by_email field.
func (r *mutationResolver) FindMemberByEmail(ctx context.Context, email string) (*ent.Member, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	member, err := r.client.Member.Query().Where(member.EmailEQ(email)).Only(ctx)
	if err != nil {
		return nil, err
	}
	return member, nil
}

// CreateAirport is the resolver for the create_airport field.
func (r *mutationResolver) CreateAirport(ctx context.Context, input ent.CreateAirportInput) (*ent.Airport, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	return r.client.Airport.Create().SetInput(input).Save(ctx)
}

// UpdateAirport is the resolver for the update_airport field.
func (r *mutationResolver) UpdateAirport(ctx context.Context, id int, input ent.UpdateAirportInput) (*ent.Airport, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	airport, err := r.FindAirportByID(ctx, id)
	if err != nil {
		return nil, errors.New("can't find airport")
	}
	airport, err = airport.Update().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}
	return airport, nil
}

// DeleteAirport is the resolver for the delete_airport field.
func (r *mutationResolver) DeleteAirport(ctx context.Context, id int) (*string, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	message := "success"
	if _, err := r.FindAirportByID(ctx, id); err != nil {
		return nil, errors.New("can't find airport")
	}
	if err := r.client.Airport.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, err
	}
	return &message, nil
}

// FindAirportByID is the resolver for the find_airport_by_id field.
func (r *mutationResolver) FindAirportByID(ctx context.Context, id int) (*ent.Airport, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	airport, err := r.client.Airport.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	return airport, nil
}

// FindAirportByName is the resolver for the find_airport_by_name field.
func (r *mutationResolver) FindAirportByName(ctx context.Context, name string) (*ent.Airport, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin, member.MemberTypeMember); err != nil {
		return nil, err
	}
	a, err := r.client.Airport.Query().Where(airport.NameEqualFold(name)).Only(ctx)
	if err != nil {
		return nil, err
	}
	return a, nil
}

// CreatePlane is the resolver for the create_plane field.
func (r *mutationResolver) CreatePlane(ctx context.Context, input ent.CreatePlaneInput) (*ent.Plane, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	return r.client.Plane.Create().SetInput(input).Save(ctx)
}

// UpdatePlane is the resolver for the update_plane field.
func (r *mutationResolver) UpdatePlane(ctx context.Context, id int, input ent.UpdatePlaneInput) (*ent.Plane, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	plane, err := r.client.Plane.UpdateOneID(id).SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}
	return plane, nil
}

// DeletePlane is the resolver for the delete_plane field.
func (r *mutationResolver) DeletePlane(ctx context.Context, id int) (*string, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	message := "delete success!"
	if err := r.client.Plane.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, err
	}
	return &message, nil
}

// FindPlaneByID is the resolver for the find_plane_by_id field.
func (r *mutationResolver) FindPlaneByID(ctx context.Context, id int) (*ent.Plane, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	plane, err := r.client.Plane.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	return plane, nil
}

// CreateFlight is the resolver for the create_flight field.
func (r *mutationResolver) CreateFlight(ctx context.Context, input ent.CreateFlight) (*ent.Flight, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	plane, err := r.client.Plane.Get(ctx, input.PlaneID)
	if err != nil {
		return nil, err
	}
	return r.client.Flight.Create().SetName(input.Name).SetDepartAt(input.DepartAt).SetLandAt(input.LandAt).SetToAirportID(input.ToID).SetFromAirportID(input.FromID).SetPlaneID(input.PlaneID).SetAvailableBcSlot(int(plane.BusinessClassSlots)).SetAvailableEcSlot(int(plane.EconomyClassSlots)).Save(ctx)
}

// CancelFlight is the resolver for the cancel_flight field.
func (r *mutationResolver) CancelFlight(ctx context.Context, id int) (*string, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	message := "cancel flight successfully"
	f, _ := r.FindFlightByID(ctx, id)
	if _, err := f.Update().SetStatus(flight.StatusCanceled).Save(ctx); err != nil {
		return nil, err
	}
	r.client.Booking.Update().Where(booking.FlightID(id)).SetStatus(booking.StatusCancel)
	return &message, nil
}

// DecreaseFlightSlot is the resolver for the decrease_flight_slot field.
func (r *mutationResolver) DecreaseFlightSlot(ctx context.Context, flightID int, seatType booking.SeatType) (*string, error) {
	message := "decrease slot success"
	fl, err := r.FindFlightByID(ctx, flightID)
	if err != nil {
		return nil, err
	}
	if seatType.String() == "EC" {
		if _, err := fl.Update().SetAvailableEcSlot(*fl.AvailableEcSlot - 1).Save(ctx); err != nil {
			return nil, err
		}
	}
	if _, err := fl.Update().SetAvailableBcSlot(*fl.AvailableBcSlot - 1).Save(ctx); err != nil {
		return nil, err
	}
	return &message, nil
}

// UpdateFlightStatus is the resolver for the update_flight_status field.
func (r *mutationResolver) UpdateFlightStatus(ctx context.Context, id int, input *ent.UpdateFlightStatus) (*ent.Flight, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	f, err := r.FindFlightByID(ctx, id)
	if err != nil {
		return nil, err
	}
	if _, err := f.Update().SetStatus(input.Status).Save(ctx); err != nil {
		return nil, err
	}

	return f, err
}

// SearchFlight is the resolver for the search_flight field.
func (r *mutationResolver) SearchFlight(ctx context.Context, input ent.SearchFlight) ([]*ent.Flight, error) {
	fromAirport, _ := r.FindAirportByName(ctx, input.FromAirport)
	toAirport, _ := r.FindAirportByName(ctx, input.ToAirport)

	flights, err := r.client.Flight.Query().Where(flight.And(
		flight.FromAirportID(fromAirport.ID),
		flight.ToAirportID(toAirport.ID),
		flight.DepartAtGTE(input.DepartAt),
	),
	).All(ctx)
	if err != nil {
		return nil, err
	}
	return flights, nil
}

// FindFlightByID is the resolver for the find_flight_by_id field.
func (r *mutationResolver) FindFlightByID(ctx context.Context, id int) (*ent.Flight, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	f, err := r.client.Flight.Get(ctx, id)
	if err != nil {
		return nil, errors.New("can't find flight")
	}
	return f, nil
}

// CreateCustomer is the resolver for the create_customer field.
func (r *mutationResolver) CreateCustomer(ctx context.Context, input ent.CustomerInput) (*ent.Customer, error) {
	return r.client.Customer.Create().SetEmail(input.Email).SetPhoneNumber(input.PhoneNumber).SetCid(input.Cid).SetFullName(input.FullName).Save(ctx)
}

// FindCustomerByCid is the resolver for the find_customer_by_cid field.
func (r *mutationResolver) FindCustomerByCid(ctx context.Context, cid string) (*ent.Customer, error) {
	return r.client.Customer.Query().Where(customer.Cid(cid)).Only(ctx)
}

// CreateCustomerBooking is the resolver for the create_customer_booking field.
func (r *mutationResolver) CreateCustomerBooking(ctx context.Context, input ent.CustomerBooking) (*ent.Booking, error) {
	bookingRes, err := r.client.Booking.Create().
		SetFlightID(input.FlightID).
		SetSeatType(input.SeatType).
		SetCustomerID(input.CustomerID).
		SetStatus(booking.StatusSuccess).
		SetCode(helper.GetRandomString(input.CustomerID, input.FlightID)).Save(ctx)
	if err != nil {
		return nil, err
	}
	if _, err := r.DecreaseFlightSlot(ctx, bookingRes.FlightID, bookingRes.SeatType); err != nil {
		return nil, err
	}
	return bookingRes, nil
}

// CreateMemberBooking is the resolver for the create_member_booking field.
func (r *mutationResolver) CreateMemberBooking(ctx context.Context, input ent.MemberBooking) (*ent.Booking, error) {
	mem, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeMember)
	if err != nil {
		return nil, err
	}
	cus, err := r.client.Customer.Query().Where(customer.MemberID(mem.ID)).Only(ctx)
	bookingRes, err := r.client.Booking.Create().
		SetCode(helper.GetRandomString(cus.ID, input.FlightID)).
		SetSeatType(input.SeatType).
		SetStatus(booking.StatusSuccess).
		SetCustomerID(cus.ID).
		SetFlightID(input.FlightID).Save(ctx)
	if err != nil {
		return nil, err
	}
	if _, err := r.DecreaseFlightSlot(ctx, bookingRes.FlightID, bookingRes.SeatType); err != nil {
		return nil, err
	}
	return bookingRes, nil
}

// ViewBookingHistory is the resolver for the view_booking_history field.
func (r *mutationResolver) ViewBookingHistory(ctx context.Context) ([]*ent.Booking, error) {
	mem, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeMember)
	if err != nil {
		return nil, err
	}
	bookings, err := r.client.Booking.Query().Where(booking.CustomerID(mem.ID)).All(ctx)
	if err != nil {
		return nil, err
	}
	return bookings, nil
}

// SearchBooking is the resolver for the search_booking field.
func (r *mutationResolver) SearchBooking(ctx context.Context, input ent.SearchBooking) (*ent.Booking, error) {
	cus, err := r.FindCustomerByCid(ctx, input.Cid)
	if err != nil {
		return nil, errors.New("can't find customer by CID")
	}
	book, err := r.client.Booking.Query().Where(booking.And(
		booking.FlightID(input.FlightID),
		booking.Code(input.BookingCode),
		booking.CustomerID(cus.ID),
	)).Only(ctx)
	if err != nil {
		return nil, err
	}
	return book, nil
}

// CancelBooking is the resolver for the cancel_booking field.
func (r *mutationResolver) CancelBooking(ctx context.Context, input ent.SearchBooking) (*string, error) {
	message := "Cancel successfully!"
	book, err := r.SearchBooking(ctx, input)
	if err != nil {
		return nil, err
	}
	if _, err := book.Update().SetStatus(booking.StatusCancel).Save(ctx); err != nil {
		return nil, err
	}
	slotType := book.SeatType
	fl, err := r.FindFlightByID(ctx, input.FlightID)
	if err != nil {
		return nil, err
	}
	departAt := fl.DepartAt
	compareTime := time.Now().Add(time.Hour * 4)
	if departAt.Equal(compareTime) || departAt.Before(compareTime) {
		return nil, errors.New("can't cancel booking because flight will be take off")
	}
	if slotType.String() == "EC" {
		if _, err := fl.Update().SetAvailableEcSlot(*fl.AvailableEcSlot + 1).Save(ctx); err != nil {
			return nil, err
		}
	}
	if _, err := fl.Update().SetAvailableBcSlot(*fl.AvailableBcSlot + 1).Save(ctx); err != nil {
		return nil, err
	}
	return &message, nil
}

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *mutationResolver) UpdateFlightSlot(ctx context.Context) (*ent.Flight, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	panic(fmt.Errorf("not implemented: UpdateFlightSlot - update_flight_slot"))
}
