package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"booking-flight-system/ent"
	"booking-flight-system/ent/booking"
	"booking-flight-system/ent/customer"
	"booking-flight-system/ent/member"
	graphql1 "booking-flight-system/graphql"
	"booking-flight-system/helper"
	"context"
	"errors"
	"time"

	"entgo.io/contrib/entgql"
)

// CreateCustomerBooking is the resolver for the create_customer_booking field.
func (r *bookingOpsResolver) CreateCustomerBooking(ctx context.Context, obj *ent.BookingOps, input ent.CustomerBooking) (*ent.Booking, error) {
	flightRes, err := r.FindFlightByID(ctx, obj, input.FlightID)
	if err != nil {
		return nil, err
	}
	if input.SeatType.String() == "EC" && *flightRes.AvailableEcSlot == 0 {
		return nil, errors.New("out of economy class")
	}
	if input.SeatType.String() == "BC" && *flightRes.AvailableBcSlot == 0 {
		return nil, errors.New("out of business class")
	}

	bookingRes, err := r.client.Booking.Create().
		SetFlightID(input.FlightID).
		SetSeatType(input.SeatType).
		SetCustomerID(input.CustomerID).
		SetStatus(booking.StatusSuccess).
		SetCode(helper.GetRandomString(input.CustomerID, input.FlightID)).Save(ctx)
	if err != nil {
		return nil, err
	}
	if _, err := r.DecreaseFlightSlot(ctx, obj, bookingRes.FlightID, bookingRes.SeatType); err != nil {
		return nil, err
	}
	return bookingRes, nil
}

// CreateCustomerBookingRoundTrip is the resolver for the create_customer_booking_round_trip field.
func (r *bookingOpsResolver) CreateCustomerBookingRoundTrip(ctx context.Context, obj *ent.BookingOps, input *ent.CustomerBookingRoundTrip) ([]*ent.Booking, error) {
	flightArrive, err := r.FindFlightByID(ctx, obj, input.FlightIDArrive)
	if err != nil {
		return nil, err
	}
	if input.SeatTypeArrive.String() == "EC" && *flightArrive.AvailableEcSlot == 0 {
		return nil, errors.New("out of economy class")
	}
	if input.SeatTypeArrive.String() == "BC" && *flightArrive.AvailableBcSlot == 0 {
		return nil, errors.New("out of business class")
	}
	flightCB, err := r.FindFlightByID(ctx, obj, input.FlightIDComeback)
	if err != nil {
		return nil, err
	}
	if input.SeatTypeComeback.String() == "EC" && *flightCB.AvailableEcSlot == 0 {
		return nil, errors.New("out of economy class")
	}
	if input.SeatTypeComeback.String() == "BC" && *flightCB.AvailableBcSlot == 0 {
		return nil, errors.New("out of business class")
	}
	bookingArrival, err := r.client.Booking.Create().
		SetFlightID(input.FlightIDArrive).
		SetSeatType(input.SeatTypeArrive).
		SetCustomerID(input.CustomerID).
		SetStatus(booking.StatusSuccess).
		SetCode(helper.GetRandomString(input.CustomerID, input.FlightIDArrive)).Save(ctx)
	if err != nil {
		return nil, err
	}
	if _, err := r.DecreaseFlightSlot(ctx, obj, bookingArrival.FlightID, bookingArrival.SeatType); err != nil {
		return nil, err
	}

	bookingCB, err := r.client.Booking.Create().
		SetFlightID(input.FlightIDComeback).
		SetSeatType(input.SeatTypeComeback).
		SetCustomerID(input.CustomerID).
		SetIsRound(true).
		SetStatus(booking.StatusSuccess).
		SetCode(helper.GetRandomString(input.CustomerID, input.FlightIDComeback)).Save(ctx)
	if err != nil {
		return nil, err
	}
	if _, err := r.DecreaseFlightSlot(ctx, obj, bookingCB.FlightID, bookingCB.SeatType); err != nil {
		return nil, err
	}
	bookings := []*ent.Booking{bookingArrival, bookingCB}
	return bookings, nil
}

// CreateMemberBooking is the resolver for the create_member_booking field.
func (r *bookingOpsResolver) CreateMemberBooking(ctx context.Context, obj *ent.BookingOps, input ent.MemberBooking) (*ent.Booking, error) {
	mem, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeMember)
	if err != nil {
		return nil, err
	}
	cus, err := r.client.Customer.Query().Where(customer.MemberID(mem.ID)).Only(ctx)
	if err != nil {
		return nil, err
	}
	flightRes, err := r.FindFlightByID(ctx, obj, input.FlightID)
	if err != nil {
		return nil, err
	}
	if input.SeatType.String() == "EC" && *flightRes.AvailableEcSlot == 0 {
		return nil, errors.New("out of economy class")
	}
	if input.SeatType.String() == "BC" && *flightRes.AvailableBcSlot == 0 {
		return nil, errors.New("out of business class")
	}
	bookingRes, err := r.client.Booking.Create().
		SetCode(helper.GetRandomString(cus.ID, input.FlightID)).
		SetSeatType(input.SeatType).
		SetStatus(booking.StatusSuccess).
		SetCustomerID(cus.ID).
		SetFlightID(input.FlightID).Save(ctx)
	if err != nil {
		return nil, err
	}
	if _, err := r.DecreaseFlightSlot(ctx, obj, bookingRes.FlightID, bookingRes.SeatType); err != nil {
		return nil, err
	}
	return bookingRes, nil
}

// CreateMemberBookingRoundTrip is the resolver for the create_member_booking_round_trip field.
func (r *bookingOpsResolver) CreateMemberBookingRoundTrip(ctx context.Context, obj *ent.BookingOps, input ent.MemberBookingRoundTrip) ([]*ent.Booking, error) {
	mem, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeMember)
	if err != nil {
		return nil, err
	}
	cus, err := r.client.Customer.Query().Where(customer.MemberID(mem.ID)).Only(ctx)
	if err != nil {
		return nil, err
	}

	flightArrive, err := r.FindFlightByID(ctx, obj, input.FlightIDArrive)
	if err != nil {
		return nil, err
	}
	if input.SeatTypeArrive.String() == "EC" && *flightArrive.AvailableEcSlot == 0 {
		return nil, errors.New("out of economy class")
	}
	if input.SeatTypeArrive.String() == "BC" && *flightArrive.AvailableBcSlot == 0 {
		return nil, errors.New("out of business class")
	}
	flightCB, err := r.FindFlightByID(ctx, obj, input.FlightIDComeback)
	if err != nil {
		return nil, err
	}
	if input.SeatTypeComeback.String() == "EC" && *flightCB.AvailableEcSlot == 0 {
		return nil, errors.New("out of economy class")
	}
	if input.SeatTypeComeback.String() == "BC" && *flightCB.AvailableBcSlot == 0 {
		return nil, errors.New("out of business class")
	}
	bookingArrival, err := r.client.Booking.Create().
		SetCode(helper.GetRandomString(cus.ID, input.FlightIDArrive)).
		SetSeatType(input.SeatTypeArrive).
		SetStatus(booking.StatusSuccess).
		SetCustomerID(cus.ID).
		SetFlightID(input.FlightIDArrive).Save(ctx)
	if err != nil {
		return nil, err
	}
	if _, err := r.DecreaseFlightSlot(ctx, obj, bookingArrival.FlightID, bookingArrival.SeatType); err != nil {
		return nil, err
	}

	bookingCB, err := r.client.Booking.Create().
		SetCode(helper.GetRandomString(cus.ID, input.FlightIDComeback)).
		SetSeatType(input.SeatTypeComeback).
		SetStatus(booking.StatusSuccess).
		SetCustomerID(cus.ID).
		SetIsRound(true).
		SetFlightID(input.FlightIDComeback).Save(ctx)
	if err != nil {
		return nil, err
	}
	if _, err := r.DecreaseFlightSlot(ctx, obj, bookingCB.FlightID, bookingCB.SeatType); err != nil {
		return nil, err
	}
	bookings := []*ent.Booking{bookingArrival, bookingCB}
	return bookings, nil
}

// ViewBookingHistory is the resolver for the view_booking_history field.
func (r *bookingOpsResolver) ViewBookingHistory(ctx context.Context, obj *ent.BookingOps) ([]*ent.Booking, error) {
	mem, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeMember)
	if err != nil {
		return nil, err
	}
	bookings, err := r.client.Booking.Query().Where(booking.CustomerID(mem.ID)).All(ctx)
	if err != nil {
		return nil, err
	}
	return bookings, nil
}

// SearchBooking is the resolver for the search_booking field.
func (r *bookingOpsResolver) SearchBooking(ctx context.Context, obj *ent.BookingOps, input ent.SearchBooking) (*ent.Booking, error) {
	cus, err := r.FindCustomerByCid(ctx, obj, input.Cid)
	if err != nil {
		return nil, errors.New("can't find customer by CID")
	}
	book, err := r.client.Booking.Query().Where(booking.And(
		booking.FlightID(input.FlightID),
		booking.Code(input.BookingCode),
		booking.CustomerID(cus.ID),
	)).Only(ctx)
	if err != nil {
		return nil, err
	}
	return book, nil
}

// CancelBooking is the resolver for the cancel_booking field.
func (r *bookingOpsResolver) CancelBooking(ctx context.Context, obj *ent.BookingOps, input ent.SearchBooking) (*string, error) {
	message := "Cancel successfully!"
	book, err := r.SearchBooking(ctx, obj, input)
	if err != nil {
		return nil, err
	}
	if _, err := book.Update().SetStatus(booking.StatusCancel).Save(ctx); err != nil {
		return nil, err
	}
	slotType := book.SeatType
	fl, err := r.FindFlightByID(ctx, obj, input.FlightID)
	if err != nil {
		return nil, err
	}
	departAt := fl.DepartAt
	compareTime := time.Now().Add(time.Hour * 48)
	if departAt.Equal(compareTime) || departAt.Before(compareTime) {
		return nil, errors.New("can't cancel booking because flight will be take off")
	}
	if slotType.String() == "EC" {
		if _, err := fl.Update().SetAvailableEcSlot(*fl.AvailableEcSlot + 1).Save(ctx); err != nil {
			return nil, err
		}
	}
	if _, err := fl.Update().SetAvailableBcSlot(*fl.AvailableBcSlot + 1).Save(ctx); err != nil {
		return nil, err
	}
	return &message, nil
}

// UpdateBookingsStatus is the resolver for the update_bookings_status field.
func (r *bookingOpsResolver) UpdateBookingsStatus(ctx context.Context, obj *ent.BookingOps, flightID int) (*int, error) {
	bookings, err := r.client.Booking.Update().Where(booking.FlightID(flightID)).SetStatus(booking.StatusCancel).Save(ctx)
	if err != nil {
		return nil, err
	}
	return &bookings, nil
}

// FindFlightByID is the resolver for the find_flight_by_id field.
func (r *bookingOpsResolver) FindFlightByID(ctx context.Context, obj *ent.BookingOps, id int) (*ent.Flight, error) {
	f, err := r.client.Flight.Get(ctx, id)
	if err != nil {
		return nil, errors.New("can't find flight")
	}
	return f, nil
}

// FindCustomerByCid is the resolver for the find_customer_by_cid field.
func (r *bookingOpsResolver) FindCustomerByCid(ctx context.Context, obj *ent.BookingOps, cid string) (*ent.Customer, error) {
	customerRes, err := r.client.Customer.Query().Where(customer.Cid(cid)).Only(ctx)
	if err != nil {
		return nil, err
	}
	return customerRes, err
}

// DecreaseFlightSlot is the resolver for the decrease_flight_slot field.
func (r *bookingOpsResolver) DecreaseFlightSlot(ctx context.Context, obj *ent.BookingOps, flightID int, seatType booking.SeatType) (*string, error) {
	message := "decrease slot success"
	fl, err := r.FindFlightByID(ctx, obj, flightID)
	if err != nil {
		return nil, err
	}
	if seatType.String() == "EC" {
		if _, err := fl.Update().SetAvailableEcSlot(*fl.AvailableEcSlot - 1).Save(ctx); err != nil {
			return nil, err
		}
	}
	if seatType.String() == "BC" {
		if _, err := fl.Update().SetAvailableBcSlot(*fl.AvailableBcSlot - 1).Save(ctx); err != nil {
			return nil, err
		}
	}
	return &message, nil
}

// ListBookings is the resolver for the list_bookings field.
func (r *bookingOpsResolver) ListBookings(ctx context.Context, obj *ent.BookingOps, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.BookingOrder) (*ent.BookingConnection, error) {
	_, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin)
	if err != nil {
		return nil, err
	}
	return r.client.Booking.Query().Paginate(ctx, after, first, before, last, ent.WithBookingOrder(orderBy))
}

// Booking is the resolver for the booking field.
func (r *mutationResolver) Booking(ctx context.Context) (*ent.BookingOps, error) {
	return &ent.BookingOps{}, nil
}

// BookingOps returns graphql1.BookingOpsResolver implementation.
func (r *Resolver) BookingOps() graphql1.BookingOpsResolver { return &bookingOpsResolver{r} }

type bookingOpsResolver struct{ *Resolver }
