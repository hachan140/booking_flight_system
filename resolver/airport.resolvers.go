package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"booking-flight-system/ent"
	"booking-flight-system/ent/member"
	graphql1 "booking-flight-system/graphql"
	"context"
	"errors"

	"entgo.io/contrib/entgql"
)

// CreateAirport is the resolver for the create_airport field.
func (r *airportOpsResolver) CreateAirport(ctx context.Context, obj *ent.AirportOps, input ent.CreateAirportInput) (*ent.Airport, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	if len(input.Name) == 0 || input.Lat < 0 || input.Long < 0 {
		return nil, errors.New("invalid airport")
	}
	airportRes, err := r.client.Airport.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}
	return airportRes, nil
}

// UpdateAirport is the resolver for the update_airport field.
func (r *airportOpsResolver) UpdateAirport(ctx context.Context, obj *ent.AirportOps, id int, input ent.UpdateAirportInput) (*ent.Airport, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	if len(*input.Name) == 0 || *input.Lat < 0 || *input.Long < 0 {
		return nil, errors.New("invalid airport")
	}
	airportRes, err := r.FindAirportByID(ctx, obj, id)
	if err != nil {
		return nil, errors.New("can't find airport")
	}
	airportRes, err = airportRes.Update().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}
	return airportRes, nil
}

// DeleteAirport is the resolver for the delete_airport field.
func (r *airportOpsResolver) DeleteAirport(ctx context.Context, obj *ent.AirportOps, id int) (*string, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	message := "success"
	if _, err := r.FindAirportByID(ctx, obj, id); err != nil {
		return nil, errors.New("can't find airport")
	}
	if err := r.client.Airport.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, err
	}
	return &message, nil
}

// FindAirportByID is the resolver for the find_airport_by_id field.
func (r *airportOpsResolver) FindAirportByID(ctx context.Context, obj *ent.AirportOps, id int) (*ent.Airport, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	airportRes, err := r.client.Airport.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	if err != nil {
		return nil, err
	}
	return airportRes, nil
}

// ListAirports is the resolver for the list_airports field.
func (r *airportOpsResolver) ListAirports(ctx context.Context, obj *ent.AirportOps, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.AirportOrder) (*ent.AirportConnection, error) {
	_, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin)
	if err != nil {
		return nil, err
	}
	return r.client.Airport.Query().Paginate(ctx, after, first, before, last, ent.WithAirportOrder(orderBy))
}

// Airport is the resolver for the airport field.
func (r *mutationResolver) Airport(ctx context.Context) (*ent.AirportOps, error) {
	return &ent.AirportOps{}, nil
}

// AirportOps returns graphql1.AirportOpsResolver implementation.
func (r *Resolver) AirportOps() graphql1.AirportOpsResolver { return &airportOpsResolver{r} }

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

type airportOpsResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
