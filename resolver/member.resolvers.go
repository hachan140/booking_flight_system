package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"booking-flight-system/ent"
	"booking-flight-system/ent/member"
	graphql1 "booking-flight-system/graphql"
	"context"
	"errors"
)

// SignUp is the resolver for the SignUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input ent.CreateMemberInput) (*ent.Member, error) {
	return r.client.Member.Create().SetInput(input).Save(ctx)
}

// Login is the resolver for the Login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*ent.Token, error) {
	user, err := r.client.Member.Query().Where(member.Email(email), member.Password(password)).Only(ctx)
	if err != nil {
		return nil, err
	}
	token, expAt, err := r.jwtService.GenerateToken(*user)
	if err != nil {
		return nil, err
	}
	return &ent.Token{
		Token:     token,
		ExpiredAt: expAt,
	}, nil
}

// Self is the resolver for the Self field.
func (r *mutationResolver) Self(ctx context.Context) (*ent.Member, error) {
	email, ok := ctx.Value("user_email").(string)
	if !ok {
		return nil, errors.New("not logged in")
	}
	user, err := r.client.Member.Query().Where(member.Email(email)).Only(ctx)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
