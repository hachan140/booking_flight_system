package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"booking-flight-system/ent"
	"booking-flight-system/ent/customer"
	"booking-flight-system/ent/member"
	graphql1 "booking-flight-system/graphql"
	"booking-flight-system/helper"
	"context"
	"errors"
	"strings"

	"entgo.io/contrib/entgql"
)

// SignUp is the resolver for the sign_up field.
func (r *memberOpsResolver) SignUp(ctx context.Context, obj *ent.MemberOps, input ent.CreateMemberInput) (*ent.Member, error) {
	if err := helper.StringValidation(input.Email, "[a-z0-9]+@[a-z]+\\.[a-z]{1,2}", "email"); err != nil {
		return nil, err
	}
	if err := helper.StringValidation(input.Password, ".{8,}", "password"); err != nil {
		return nil, err
	}
	if err := helper.StringValidation(input.PhoneNumber, "[0]\\d{9}", "phone number"); err != nil {
		return nil, err
	}
	if err := helper.StringValidation(input.FullName, ".+", "full name"); err != nil {
		return nil, err
	}
	if err := helper.StringValidation(input.Cid, "\\d{8,}", "card identify number"); err != nil {
		return nil, err
	}
	input.Password = helper.SHA256Hashing(input.Password)
	memberRes, err := r.client.Member.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}
	if _, err := r.client.Customer.Create().SetEmail(input.Email).SetPhoneNumber(input.PhoneNumber).SetFullName(input.FullName).SetCid(input.Cid).SetMemberID(memberRes.ID).Save(ctx); err != nil {
		return nil, err
	}
	return memberRes, nil
}

// Login is the resolver for the login field.
func (r *memberOpsResolver) Login(ctx context.Context, obj *ent.MemberOps, email string, password string) (*ent.Token, error) {
	hashPass := helper.SHA256Hashing(password)
	user, err := r.client.Member.Query().Where(member.Email(email), member.Password(hashPass)).Only(ctx)
	if err != nil {
		return nil, err
	}
	token, exp, err := r.jwtService.GenerateToken(*user)
	if err != nil {
		return nil, err
	}
	return &ent.Token{
		Token:     token,
		ExpiredAt: exp,
	}, nil
}

// Self is the resolver for the self field.
func (r *memberOpsResolver) Self(ctx context.Context, obj *ent.MemberOps) (*ent.Member, error) {
	email, ok := ctx.Value("user_email").(string)
	if !ok {
		return nil, errors.New("not logged in")
	}
	user, err := r.client.Member.Query().Where(member.Email(email)).Only(ctx)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// DeleteByID is the resolver for the delete_by_id field.
func (r *memberOpsResolver) DeleteByID(ctx context.Context, obj *ent.MemberOps, id int) (*string, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	message := "delete success"
	if err := r.client.Member.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, err
	}
	if _, err := r.client.Customer.Delete().Where(customer.MemberID(id)).Exec(ctx); err != nil {
		return nil, err
	}
	return &message, nil
}

// FindMemberByName is the resolver for the find_member_by_name field.
func (r *memberOpsResolver) FindMemberByName(ctx context.Context, obj *ent.MemberOps, name string) ([]*ent.Member, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	mem, err := r.client.Member.Query().Where(member.FullNameContainsFold(strings.ToLower(name))).All(ctx)
	if err != nil {
		return nil, err
	}
	return mem, nil
}

// ChangePassword is the resolver for the change_password field.
func (r *memberOpsResolver) ChangePassword(ctx context.Context, obj *ent.MemberOps, oldPassword string, newPassword string) (*string, error) {
	user, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin, member.MemberTypeMember)
	if err != nil {
		return nil, err
	}
	message := "success"
	if helper.SHA256Hashing(oldPassword) != user.Password {
		return nil, errors.New("password doesn't match")
	}
	if err := helper.StringValidation(newPassword, ".{8,}", "new password"); err != nil {
		return nil, err
	}

	user, err = user.Update().SetPassword(helper.SHA256Hashing(newPassword)).Save(ctx)
	if err != nil {
		return nil, err
	}
	return &message, nil
}

// UpdateMemberProfile is the resolver for the update_member_profile field.
func (r *memberOpsResolver) UpdateMemberProfile(ctx context.Context, obj *ent.MemberOps, input ent.UpdateMember) (*ent.Member, error) {
	user, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin, member.MemberTypeMember)
	if err != nil {
		return nil, err
	}
	if err := helper.StringValidation(*input.PhoneNumber, "[0]\\d{9}", "phone number"); err != nil {
		return nil, err
	}
	if err := helper.StringValidation(*input.FullName, ".+", "full name"); err != nil {
		return nil, err
	}
	if err := helper.StringValidation(*input.Cid, "\\d{8,}", "card identify number"); err != nil {
		return nil, err
	}
	user, err = user.Update().
		SetFullName(*input.FullName).
		SetCid(*input.Cid).
		SetPhoneNumber(*input.PhoneNumber).
		SetDob(*input.Dob).Save(ctx)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// FindMemberByEmail is the resolver for the find_member_by_email field.
func (r *memberOpsResolver) FindMemberByEmail(ctx context.Context, obj *ent.MemberOps, email string) (*ent.Member, error) {
	if _, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin); err != nil {
		return nil, err
	}
	memberRes, err := r.client.Member.Query().Where(member.EmailEQ(email)).Only(ctx)
	if err != nil {
		return nil, err
	}
	return memberRes, nil
}

// ListMembers is the resolver for the list_members field.
func (r *memberOpsResolver) ListMembers(ctx context.Context, obj *ent.MemberOps, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.MemberOrder) (*ent.MemberConnection, error) {
	_, err := r.memberTypeValidator.OneOf(ctx, member.MemberTypeAdmin)
	if err != nil {
		return nil, err
	}
	return r.client.Member.Query().Paginate(ctx, after, first, before, last, ent.WithMemberOrder(orderBy))
}

// Member is the resolver for the member field.
func (r *mutationResolver) Member(ctx context.Context) (*ent.MemberOps, error) {
	return &ent.MemberOps{}, nil
}

// MemberOps returns graphql1.MemberOpsResolver implementation.
func (r *Resolver) MemberOps() graphql1.MemberOpsResolver { return &memberOpsResolver{r} }

type memberOpsResolver struct{ *Resolver }
