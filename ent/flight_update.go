// Code generated by ent, DO NOT EDIT.

package ent

import (
	"booking-flight-system/ent/airport"
	"booking-flight-system/ent/booking"
	"booking-flight-system/ent/flight"
	"booking-flight-system/ent/plane"
	"booking-flight-system/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FlightUpdate is the builder for updating Flight entities.
type FlightUpdate struct {
	config
	hooks    []Hook
	mutation *FlightMutation
}

// Where appends a list predicates to the FlightUpdate builder.
func (fu *FlightUpdate) Where(ps ...predicate.Flight) *FlightUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetCreatedAt sets the "created_at" field.
func (fu *FlightUpdate) SetCreatedAt(t time.Time) *FlightUpdate {
	fu.mutation.SetCreatedAt(t)
	return fu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fu *FlightUpdate) SetNillableCreatedAt(t *time.Time) *FlightUpdate {
	if t != nil {
		fu.SetCreatedAt(*t)
	}
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FlightUpdate) SetUpdatedAt(t time.Time) *FlightUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetName sets the "name" field.
func (fu *FlightUpdate) SetName(s string) *FlightUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetDepartAt sets the "depart_at" field.
func (fu *FlightUpdate) SetDepartAt(t time.Time) *FlightUpdate {
	fu.mutation.SetDepartAt(t)
	return fu
}

// SetLandAt sets the "land_at" field.
func (fu *FlightUpdate) SetLandAt(t time.Time) *FlightUpdate {
	fu.mutation.SetLandAt(t)
	return fu
}

// SetAvailableEcSlot sets the "available_ec_slot" field.
func (fu *FlightUpdate) SetAvailableEcSlot(i int) *FlightUpdate {
	fu.mutation.ResetAvailableEcSlot()
	fu.mutation.SetAvailableEcSlot(i)
	return fu
}

// AddAvailableEcSlot adds i to the "available_ec_slot" field.
func (fu *FlightUpdate) AddAvailableEcSlot(i int) *FlightUpdate {
	fu.mutation.AddAvailableEcSlot(i)
	return fu
}

// SetAvailableBcSlot sets the "available_bc_slot" field.
func (fu *FlightUpdate) SetAvailableBcSlot(i int) *FlightUpdate {
	fu.mutation.ResetAvailableBcSlot()
	fu.mutation.SetAvailableBcSlot(i)
	return fu
}

// AddAvailableBcSlot adds i to the "available_bc_slot" field.
func (fu *FlightUpdate) AddAvailableBcSlot(i int) *FlightUpdate {
	fu.mutation.AddAvailableBcSlot(i)
	return fu
}

// SetStatus sets the "status" field.
func (fu *FlightUpdate) SetStatus(f flight.Status) *FlightUpdate {
	fu.mutation.SetStatus(f)
	return fu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fu *FlightUpdate) SetNillableStatus(f *flight.Status) *FlightUpdate {
	if f != nil {
		fu.SetStatus(*f)
	}
	return fu
}

// SetPlaneID sets the "plane_id" field.
func (fu *FlightUpdate) SetPlaneID(i int) *FlightUpdate {
	fu.mutation.SetPlaneID(i)
	return fu
}

// SetNillablePlaneID sets the "plane_id" field if the given value is not nil.
func (fu *FlightUpdate) SetNillablePlaneID(i *int) *FlightUpdate {
	if i != nil {
		fu.SetPlaneID(*i)
	}
	return fu
}

// ClearPlaneID clears the value of the "plane_id" field.
func (fu *FlightUpdate) ClearPlaneID() *FlightUpdate {
	fu.mutation.ClearPlaneID()
	return fu
}

// SetFromAirportID sets the "from_airport_id" field.
func (fu *FlightUpdate) SetFromAirportID(i int) *FlightUpdate {
	fu.mutation.SetFromAirportID(i)
	return fu
}

// SetNillableFromAirportID sets the "from_airport_id" field if the given value is not nil.
func (fu *FlightUpdate) SetNillableFromAirportID(i *int) *FlightUpdate {
	if i != nil {
		fu.SetFromAirportID(*i)
	}
	return fu
}

// ClearFromAirportID clears the value of the "from_airport_id" field.
func (fu *FlightUpdate) ClearFromAirportID() *FlightUpdate {
	fu.mutation.ClearFromAirportID()
	return fu
}

// SetToAirportID sets the "to_airport_id" field.
func (fu *FlightUpdate) SetToAirportID(i int) *FlightUpdate {
	fu.mutation.SetToAirportID(i)
	return fu
}

// SetNillableToAirportID sets the "to_airport_id" field if the given value is not nil.
func (fu *FlightUpdate) SetNillableToAirportID(i *int) *FlightUpdate {
	if i != nil {
		fu.SetToAirportID(*i)
	}
	return fu
}

// ClearToAirportID clears the value of the "to_airport_id" field.
func (fu *FlightUpdate) ClearToAirportID() *FlightUpdate {
	fu.mutation.ClearToAirportID()
	return fu
}

// SetHasPlaneID sets the "has_plane" edge to the Plane entity by ID.
func (fu *FlightUpdate) SetHasPlaneID(id int) *FlightUpdate {
	fu.mutation.SetHasPlaneID(id)
	return fu
}

// SetNillableHasPlaneID sets the "has_plane" edge to the Plane entity by ID if the given value is not nil.
func (fu *FlightUpdate) SetNillableHasPlaneID(id *int) *FlightUpdate {
	if id != nil {
		fu = fu.SetHasPlaneID(*id)
	}
	return fu
}

// SetHasPlane sets the "has_plane" edge to the Plane entity.
func (fu *FlightUpdate) SetHasPlane(p *Plane) *FlightUpdate {
	return fu.SetHasPlaneID(p.ID)
}

// AddHasBookingIDs adds the "has_booking" edge to the Booking entity by IDs.
func (fu *FlightUpdate) AddHasBookingIDs(ids ...int) *FlightUpdate {
	fu.mutation.AddHasBookingIDs(ids...)
	return fu
}

// AddHasBooking adds the "has_booking" edges to the Booking entity.
func (fu *FlightUpdate) AddHasBooking(b ...*Booking) *FlightUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return fu.AddHasBookingIDs(ids...)
}

// SetFromAirport sets the "from_airport" edge to the Airport entity.
func (fu *FlightUpdate) SetFromAirport(a *Airport) *FlightUpdate {
	return fu.SetFromAirportID(a.ID)
}

// SetToAirport sets the "to_airport" edge to the Airport entity.
func (fu *FlightUpdate) SetToAirport(a *Airport) *FlightUpdate {
	return fu.SetToAirportID(a.ID)
}

// Mutation returns the FlightMutation object of the builder.
func (fu *FlightUpdate) Mutation() *FlightMutation {
	return fu.mutation
}

// ClearHasPlane clears the "has_plane" edge to the Plane entity.
func (fu *FlightUpdate) ClearHasPlane() *FlightUpdate {
	fu.mutation.ClearHasPlane()
	return fu
}

// ClearHasBooking clears all "has_booking" edges to the Booking entity.
func (fu *FlightUpdate) ClearHasBooking() *FlightUpdate {
	fu.mutation.ClearHasBooking()
	return fu
}

// RemoveHasBookingIDs removes the "has_booking" edge to Booking entities by IDs.
func (fu *FlightUpdate) RemoveHasBookingIDs(ids ...int) *FlightUpdate {
	fu.mutation.RemoveHasBookingIDs(ids...)
	return fu
}

// RemoveHasBooking removes "has_booking" edges to Booking entities.
func (fu *FlightUpdate) RemoveHasBooking(b ...*Booking) *FlightUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return fu.RemoveHasBookingIDs(ids...)
}

// ClearFromAirport clears the "from_airport" edge to the Airport entity.
func (fu *FlightUpdate) ClearFromAirport() *FlightUpdate {
	fu.mutation.ClearFromAirport()
	return fu
}

// ClearToAirport clears the "to_airport" edge to the Airport entity.
func (fu *FlightUpdate) ClearToAirport() *FlightUpdate {
	fu.mutation.ClearToAirport()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FlightUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FlightUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FlightUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FlightUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FlightUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := flight.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FlightUpdate) check() error {
	if v, ok := fu.mutation.Name(); ok {
		if err := flight.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Flight.name": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Status(); ok {
		if err := flight.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Flight.status": %w`, err)}
		}
	}
	return nil
}

func (fu *FlightUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(flight.Table, flight.Columns, sqlgraph.NewFieldSpec(flight.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.CreatedAt(); ok {
		_spec.SetField(flight.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(flight.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(flight.FieldName, field.TypeString, value)
	}
	if value, ok := fu.mutation.DepartAt(); ok {
		_spec.SetField(flight.FieldDepartAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.LandAt(); ok {
		_spec.SetField(flight.FieldLandAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.AvailableEcSlot(); ok {
		_spec.SetField(flight.FieldAvailableEcSlot, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedAvailableEcSlot(); ok {
		_spec.AddField(flight.FieldAvailableEcSlot, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AvailableBcSlot(); ok {
		_spec.SetField(flight.FieldAvailableBcSlot, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedAvailableBcSlot(); ok {
		_spec.AddField(flight.FieldAvailableBcSlot, field.TypeInt, value)
	}
	if value, ok := fu.mutation.Status(); ok {
		_spec.SetField(flight.FieldStatus, field.TypeEnum, value)
	}
	if fu.mutation.HasPlaneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.HasPlaneTable,
			Columns: []string{flight.HasPlaneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plane.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.HasPlaneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.HasPlaneTable,
			Columns: []string{flight.HasPlaneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plane.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.HasBookingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.HasBookingTable,
			Columns: []string{flight.HasBookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedHasBookingIDs(); len(nodes) > 0 && !fu.mutation.HasBookingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.HasBookingTable,
			Columns: []string{flight.HasBookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.HasBookingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.HasBookingTable,
			Columns: []string{flight.HasBookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FromAirportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.FromAirportTable,
			Columns: []string{flight.FromAirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FromAirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.FromAirportTable,
			Columns: []string{flight.FromAirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ToAirportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.ToAirportTable,
			Columns: []string{flight.ToAirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ToAirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.ToAirportTable,
			Columns: []string{flight.ToAirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FlightUpdateOne is the builder for updating a single Flight entity.
type FlightUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FlightMutation
}

// SetCreatedAt sets the "created_at" field.
func (fuo *FlightUpdateOne) SetCreatedAt(t time.Time) *FlightUpdateOne {
	fuo.mutation.SetCreatedAt(t)
	return fuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fuo *FlightUpdateOne) SetNillableCreatedAt(t *time.Time) *FlightUpdateOne {
	if t != nil {
		fuo.SetCreatedAt(*t)
	}
	return fuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FlightUpdateOne) SetUpdatedAt(t time.Time) *FlightUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetName sets the "name" field.
func (fuo *FlightUpdateOne) SetName(s string) *FlightUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetDepartAt sets the "depart_at" field.
func (fuo *FlightUpdateOne) SetDepartAt(t time.Time) *FlightUpdateOne {
	fuo.mutation.SetDepartAt(t)
	return fuo
}

// SetLandAt sets the "land_at" field.
func (fuo *FlightUpdateOne) SetLandAt(t time.Time) *FlightUpdateOne {
	fuo.mutation.SetLandAt(t)
	return fuo
}

// SetAvailableEcSlot sets the "available_ec_slot" field.
func (fuo *FlightUpdateOne) SetAvailableEcSlot(i int) *FlightUpdateOne {
	fuo.mutation.ResetAvailableEcSlot()
	fuo.mutation.SetAvailableEcSlot(i)
	return fuo
}

// AddAvailableEcSlot adds i to the "available_ec_slot" field.
func (fuo *FlightUpdateOne) AddAvailableEcSlot(i int) *FlightUpdateOne {
	fuo.mutation.AddAvailableEcSlot(i)
	return fuo
}

// SetAvailableBcSlot sets the "available_bc_slot" field.
func (fuo *FlightUpdateOne) SetAvailableBcSlot(i int) *FlightUpdateOne {
	fuo.mutation.ResetAvailableBcSlot()
	fuo.mutation.SetAvailableBcSlot(i)
	return fuo
}

// AddAvailableBcSlot adds i to the "available_bc_slot" field.
func (fuo *FlightUpdateOne) AddAvailableBcSlot(i int) *FlightUpdateOne {
	fuo.mutation.AddAvailableBcSlot(i)
	return fuo
}

// SetStatus sets the "status" field.
func (fuo *FlightUpdateOne) SetStatus(f flight.Status) *FlightUpdateOne {
	fuo.mutation.SetStatus(f)
	return fuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fuo *FlightUpdateOne) SetNillableStatus(f *flight.Status) *FlightUpdateOne {
	if f != nil {
		fuo.SetStatus(*f)
	}
	return fuo
}

// SetPlaneID sets the "plane_id" field.
func (fuo *FlightUpdateOne) SetPlaneID(i int) *FlightUpdateOne {
	fuo.mutation.SetPlaneID(i)
	return fuo
}

// SetNillablePlaneID sets the "plane_id" field if the given value is not nil.
func (fuo *FlightUpdateOne) SetNillablePlaneID(i *int) *FlightUpdateOne {
	if i != nil {
		fuo.SetPlaneID(*i)
	}
	return fuo
}

// ClearPlaneID clears the value of the "plane_id" field.
func (fuo *FlightUpdateOne) ClearPlaneID() *FlightUpdateOne {
	fuo.mutation.ClearPlaneID()
	return fuo
}

// SetFromAirportID sets the "from_airport_id" field.
func (fuo *FlightUpdateOne) SetFromAirportID(i int) *FlightUpdateOne {
	fuo.mutation.SetFromAirportID(i)
	return fuo
}

// SetNillableFromAirportID sets the "from_airport_id" field if the given value is not nil.
func (fuo *FlightUpdateOne) SetNillableFromAirportID(i *int) *FlightUpdateOne {
	if i != nil {
		fuo.SetFromAirportID(*i)
	}
	return fuo
}

// ClearFromAirportID clears the value of the "from_airport_id" field.
func (fuo *FlightUpdateOne) ClearFromAirportID() *FlightUpdateOne {
	fuo.mutation.ClearFromAirportID()
	return fuo
}

// SetToAirportID sets the "to_airport_id" field.
func (fuo *FlightUpdateOne) SetToAirportID(i int) *FlightUpdateOne {
	fuo.mutation.SetToAirportID(i)
	return fuo
}

// SetNillableToAirportID sets the "to_airport_id" field if the given value is not nil.
func (fuo *FlightUpdateOne) SetNillableToAirportID(i *int) *FlightUpdateOne {
	if i != nil {
		fuo.SetToAirportID(*i)
	}
	return fuo
}

// ClearToAirportID clears the value of the "to_airport_id" field.
func (fuo *FlightUpdateOne) ClearToAirportID() *FlightUpdateOne {
	fuo.mutation.ClearToAirportID()
	return fuo
}

// SetHasPlaneID sets the "has_plane" edge to the Plane entity by ID.
func (fuo *FlightUpdateOne) SetHasPlaneID(id int) *FlightUpdateOne {
	fuo.mutation.SetHasPlaneID(id)
	return fuo
}

// SetNillableHasPlaneID sets the "has_plane" edge to the Plane entity by ID if the given value is not nil.
func (fuo *FlightUpdateOne) SetNillableHasPlaneID(id *int) *FlightUpdateOne {
	if id != nil {
		fuo = fuo.SetHasPlaneID(*id)
	}
	return fuo
}

// SetHasPlane sets the "has_plane" edge to the Plane entity.
func (fuo *FlightUpdateOne) SetHasPlane(p *Plane) *FlightUpdateOne {
	return fuo.SetHasPlaneID(p.ID)
}

// AddHasBookingIDs adds the "has_booking" edge to the Booking entity by IDs.
func (fuo *FlightUpdateOne) AddHasBookingIDs(ids ...int) *FlightUpdateOne {
	fuo.mutation.AddHasBookingIDs(ids...)
	return fuo
}

// AddHasBooking adds the "has_booking" edges to the Booking entity.
func (fuo *FlightUpdateOne) AddHasBooking(b ...*Booking) *FlightUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return fuo.AddHasBookingIDs(ids...)
}

// SetFromAirport sets the "from_airport" edge to the Airport entity.
func (fuo *FlightUpdateOne) SetFromAirport(a *Airport) *FlightUpdateOne {
	return fuo.SetFromAirportID(a.ID)
}

// SetToAirport sets the "to_airport" edge to the Airport entity.
func (fuo *FlightUpdateOne) SetToAirport(a *Airport) *FlightUpdateOne {
	return fuo.SetToAirportID(a.ID)
}

// Mutation returns the FlightMutation object of the builder.
func (fuo *FlightUpdateOne) Mutation() *FlightMutation {
	return fuo.mutation
}

// ClearHasPlane clears the "has_plane" edge to the Plane entity.
func (fuo *FlightUpdateOne) ClearHasPlane() *FlightUpdateOne {
	fuo.mutation.ClearHasPlane()
	return fuo
}

// ClearHasBooking clears all "has_booking" edges to the Booking entity.
func (fuo *FlightUpdateOne) ClearHasBooking() *FlightUpdateOne {
	fuo.mutation.ClearHasBooking()
	return fuo
}

// RemoveHasBookingIDs removes the "has_booking" edge to Booking entities by IDs.
func (fuo *FlightUpdateOne) RemoveHasBookingIDs(ids ...int) *FlightUpdateOne {
	fuo.mutation.RemoveHasBookingIDs(ids...)
	return fuo
}

// RemoveHasBooking removes "has_booking" edges to Booking entities.
func (fuo *FlightUpdateOne) RemoveHasBooking(b ...*Booking) *FlightUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return fuo.RemoveHasBookingIDs(ids...)
}

// ClearFromAirport clears the "from_airport" edge to the Airport entity.
func (fuo *FlightUpdateOne) ClearFromAirport() *FlightUpdateOne {
	fuo.mutation.ClearFromAirport()
	return fuo
}

// ClearToAirport clears the "to_airport" edge to the Airport entity.
func (fuo *FlightUpdateOne) ClearToAirport() *FlightUpdateOne {
	fuo.mutation.ClearToAirport()
	return fuo
}

// Where appends a list predicates to the FlightUpdate builder.
func (fuo *FlightUpdateOne) Where(ps ...predicate.Flight) *FlightUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FlightUpdateOne) Select(field string, fields ...string) *FlightUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Flight entity.
func (fuo *FlightUpdateOne) Save(ctx context.Context) (*Flight, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FlightUpdateOne) SaveX(ctx context.Context) *Flight {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FlightUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FlightUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FlightUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := flight.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FlightUpdateOne) check() error {
	if v, ok := fuo.mutation.Name(); ok {
		if err := flight.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Flight.name": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Status(); ok {
		if err := flight.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Flight.status": %w`, err)}
		}
	}
	return nil
}

func (fuo *FlightUpdateOne) sqlSave(ctx context.Context) (_node *Flight, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(flight.Table, flight.Columns, sqlgraph.NewFieldSpec(flight.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Flight.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, flight.FieldID)
		for _, f := range fields {
			if !flight.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != flight.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.CreatedAt(); ok {
		_spec.SetField(flight.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(flight.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(flight.FieldName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.DepartAt(); ok {
		_spec.SetField(flight.FieldDepartAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.LandAt(); ok {
		_spec.SetField(flight.FieldLandAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.AvailableEcSlot(); ok {
		_spec.SetField(flight.FieldAvailableEcSlot, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedAvailableEcSlot(); ok {
		_spec.AddField(flight.FieldAvailableEcSlot, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AvailableBcSlot(); ok {
		_spec.SetField(flight.FieldAvailableBcSlot, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedAvailableBcSlot(); ok {
		_spec.AddField(flight.FieldAvailableBcSlot, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.Status(); ok {
		_spec.SetField(flight.FieldStatus, field.TypeEnum, value)
	}
	if fuo.mutation.HasPlaneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.HasPlaneTable,
			Columns: []string{flight.HasPlaneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plane.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.HasPlaneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.HasPlaneTable,
			Columns: []string{flight.HasPlaneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plane.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.HasBookingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.HasBookingTable,
			Columns: []string{flight.HasBookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedHasBookingIDs(); len(nodes) > 0 && !fuo.mutation.HasBookingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.HasBookingTable,
			Columns: []string{flight.HasBookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.HasBookingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flight.HasBookingTable,
			Columns: []string{flight.HasBookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FromAirportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.FromAirportTable,
			Columns: []string{flight.FromAirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FromAirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.FromAirportTable,
			Columns: []string{flight.FromAirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ToAirportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.ToAirportTable,
			Columns: []string{flight.ToAirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ToAirportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flight.ToAirportTable,
			Columns: []string{flight.ToAirportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(airport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Flight{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
