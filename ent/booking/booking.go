// Code generated by ent, DO NOT EDIT.

package booking

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the booking type in the database.
	Label = "booking"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSeatType holds the string denoting the seat_type field in the database.
	FieldSeatType = "seat_type"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldFlightID holds the string denoting the flight_id field in the database.
	FieldFlightID = "flight_id"
	// EdgeHasFlight holds the string denoting the has_flight edge name in mutations.
	EdgeHasFlight = "has_flight"
	// EdgeHasCustomer holds the string denoting the has_customer edge name in mutations.
	EdgeHasCustomer = "has_customer"
	// Table holds the table name of the booking in the database.
	Table = "bookings"
	// HasFlightTable is the table that holds the has_flight relation/edge.
	HasFlightTable = "bookings"
	// HasFlightInverseTable is the table name for the Flight entity.
	// It exists in this package in order to avoid circular dependency with the "flight" package.
	HasFlightInverseTable = "flights"
	// HasFlightColumn is the table column denoting the has_flight relation/edge.
	HasFlightColumn = "flight_id"
	// HasCustomerTable is the table that holds the has_customer relation/edge.
	HasCustomerTable = "bookings"
	// HasCustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	HasCustomerInverseTable = "customers"
	// HasCustomerColumn is the table column denoting the has_customer relation/edge.
	HasCustomerColumn = "customer_id"
)

// Columns holds all SQL columns for booking fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCode,
	FieldStatus,
	FieldSeatType,
	FieldCustomerID,
	FieldFlightID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusSuccess Status = "success"
	StatusCancel  Status = "cancel"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusSuccess, StatusCancel:
		return nil
	default:
		return fmt.Errorf("booking: invalid enum value for status field: %q", s)
	}
}

// SeatType defines the type for the "seat_type" enum field.
type SeatType string

// SeatType values.
const (
	SeatTypeEc SeatType = "ec"
	SeatTypeBc SeatType = "bc"
)

func (st SeatType) String() string {
	return string(st)
}

// SeatTypeValidator is a validator for the "seat_type" field enum values. It is called by the builders before save.
func SeatTypeValidator(st SeatType) error {
	switch st {
	case SeatTypeEc, SeatTypeBc:
		return nil
	default:
		return fmt.Errorf("booking: invalid enum value for seat_type field: %q", st)
	}
}

// OrderOption defines the ordering options for the Booking queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySeatType orders the results by the seat_type field.
func BySeatType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeatType, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByFlightID orders the results by the flight_id field.
func ByFlightID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFlightID, opts...).ToFunc()
}

// ByHasFlightField orders the results by has_flight field.
func ByHasFlightField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHasFlightStep(), sql.OrderByField(field, opts...))
	}
}

// ByHasCustomerField orders the results by has_customer field.
func ByHasCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHasCustomerStep(), sql.OrderByField(field, opts...))
	}
}
func newHasFlightStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HasFlightInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HasFlightTable, HasFlightColumn),
	)
}
func newHasCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HasCustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HasCustomerTable, HasCustomerColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e SeatType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *SeatType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = SeatType(str)
	if err := SeatTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid SeatType", str)
	}
	return nil
}
