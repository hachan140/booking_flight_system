// Code generated by ent, DO NOT EDIT.

package ent

import (
	"booking-flight-system/ent/airport"
	"booking-flight-system/ent/flight"
	"booking-flight-system/ent/plane"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Flight is the model entity for the Flight schema.
type Flight struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DepartAt holds the value of the "depart_at" field.
	DepartAt time.Time `json:"depart_at,omitempty"`
	// LandAt holds the value of the "land_at" field.
	LandAt time.Time `json:"land_at,omitempty"`
	// AvailableEcSlot holds the value of the "available_ec_slot" field.
	AvailableEcSlot *int `json:"available_ec_slot,omitempty"`
	// AvailableBcSlot holds the value of the "available_bc_slot" field.
	AvailableBcSlot *int `json:"available_bc_slot,omitempty"`
	// Status holds the value of the "status" field.
	Status flight.Status `json:"status,omitempty"`
	// PlaneID holds the value of the "plane_id" field.
	PlaneID int `json:"plane_id,omitempty"`
	// FromAirportID holds the value of the "from_airport_id" field.
	FromAirportID int `json:"from_airport_id,omitempty"`
	// ToAirportID holds the value of the "to_airport_id" field.
	ToAirportID int `json:"to_airport_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FlightQuery when eager-loading is set.
	Edges        FlightEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FlightEdges holds the relations/edges for other nodes in the graph.
type FlightEdges struct {
	// HasPlane holds the value of the has_plane edge.
	HasPlane *Plane `json:"has_plane,omitempty"`
	// HasBooking holds the value of the has_booking edge.
	HasBooking []*Booking `json:"has_booking,omitempty"`
	// FromAirport holds the value of the from_airport edge.
	FromAirport *Airport `json:"from_airport,omitempty"`
	// ToAirport holds the value of the to_airport edge.
	ToAirport *Airport `json:"to_airport,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedHasBooking map[string][]*Booking
}

// HasPlaneOrErr returns the HasPlane value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FlightEdges) HasPlaneOrErr() (*Plane, error) {
	if e.loadedTypes[0] {
		if e.HasPlane == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: plane.Label}
		}
		return e.HasPlane, nil
	}
	return nil, &NotLoadedError{edge: "has_plane"}
}

// HasBookingOrErr returns the HasBooking value or an error if the edge
// was not loaded in eager-loading.
func (e FlightEdges) HasBookingOrErr() ([]*Booking, error) {
	if e.loadedTypes[1] {
		return e.HasBooking, nil
	}
	return nil, &NotLoadedError{edge: "has_booking"}
}

// FromAirportOrErr returns the FromAirport value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FlightEdges) FromAirportOrErr() (*Airport, error) {
	if e.loadedTypes[2] {
		if e.FromAirport == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: airport.Label}
		}
		return e.FromAirport, nil
	}
	return nil, &NotLoadedError{edge: "from_airport"}
}

// ToAirportOrErr returns the ToAirport value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FlightEdges) ToAirportOrErr() (*Airport, error) {
	if e.loadedTypes[3] {
		if e.ToAirport == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: airport.Label}
		}
		return e.ToAirport, nil
	}
	return nil, &NotLoadedError{edge: "to_airport"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Flight) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case flight.FieldID, flight.FieldAvailableEcSlot, flight.FieldAvailableBcSlot, flight.FieldPlaneID, flight.FieldFromAirportID, flight.FieldToAirportID:
			values[i] = new(sql.NullInt64)
		case flight.FieldName, flight.FieldStatus:
			values[i] = new(sql.NullString)
		case flight.FieldCreatedAt, flight.FieldUpdatedAt, flight.FieldDepartAt, flight.FieldLandAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Flight fields.
func (f *Flight) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case flight.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case flight.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case flight.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case flight.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case flight.FieldDepartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field depart_at", values[i])
			} else if value.Valid {
				f.DepartAt = value.Time
			}
		case flight.FieldLandAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field land_at", values[i])
			} else if value.Valid {
				f.LandAt = value.Time
			}
		case flight.FieldAvailableEcSlot:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field available_ec_slot", values[i])
			} else if value.Valid {
				f.AvailableEcSlot = new(int)
				*f.AvailableEcSlot = int(value.Int64)
			}
		case flight.FieldAvailableBcSlot:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field available_bc_slot", values[i])
			} else if value.Valid {
				f.AvailableBcSlot = new(int)
				*f.AvailableBcSlot = int(value.Int64)
			}
		case flight.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				f.Status = flight.Status(value.String)
			}
		case flight.FieldPlaneID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field plane_id", values[i])
			} else if value.Valid {
				f.PlaneID = int(value.Int64)
			}
		case flight.FieldFromAirportID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_airport_id", values[i])
			} else if value.Valid {
				f.FromAirportID = int(value.Int64)
			}
		case flight.FieldToAirportID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field to_airport_id", values[i])
			} else if value.Valid {
				f.ToAirportID = int(value.Int64)
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Flight.
// This includes values selected through modifiers, order, etc.
func (f *Flight) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryHasPlane queries the "has_plane" edge of the Flight entity.
func (f *Flight) QueryHasPlane() *PlaneQuery {
	return NewFlightClient(f.config).QueryHasPlane(f)
}

// QueryHasBooking queries the "has_booking" edge of the Flight entity.
func (f *Flight) QueryHasBooking() *BookingQuery {
	return NewFlightClient(f.config).QueryHasBooking(f)
}

// QueryFromAirport queries the "from_airport" edge of the Flight entity.
func (f *Flight) QueryFromAirport() *AirportQuery {
	return NewFlightClient(f.config).QueryFromAirport(f)
}

// QueryToAirport queries the "to_airport" edge of the Flight entity.
func (f *Flight) QueryToAirport() *AirportQuery {
	return NewFlightClient(f.config).QueryToAirport(f)
}

// Update returns a builder for updating this Flight.
// Note that you need to call Flight.Unwrap() before calling this method if this Flight
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Flight) Update() *FlightUpdateOne {
	return NewFlightClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Flight entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Flight) Unwrap() *Flight {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Flight is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Flight) String() string {
	var builder strings.Builder
	builder.WriteString("Flight(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(f.Name)
	builder.WriteString(", ")
	builder.WriteString("depart_at=")
	builder.WriteString(f.DepartAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("land_at=")
	builder.WriteString(f.LandAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := f.AvailableEcSlot; v != nil {
		builder.WriteString("available_ec_slot=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := f.AvailableBcSlot; v != nil {
		builder.WriteString("available_bc_slot=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", f.Status))
	builder.WriteString(", ")
	builder.WriteString("plane_id=")
	builder.WriteString(fmt.Sprintf("%v", f.PlaneID))
	builder.WriteString(", ")
	builder.WriteString("from_airport_id=")
	builder.WriteString(fmt.Sprintf("%v", f.FromAirportID))
	builder.WriteString(", ")
	builder.WriteString("to_airport_id=")
	builder.WriteString(fmt.Sprintf("%v", f.ToAirportID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedHasBooking returns the HasBooking named value or an error if the edge was not
// loaded in eager-loading with this name.
func (f *Flight) NamedHasBooking(name string) ([]*Booking, error) {
	if f.Edges.namedHasBooking == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := f.Edges.namedHasBooking[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (f *Flight) appendNamedHasBooking(name string, edges ...*Booking) {
	if f.Edges.namedHasBooking == nil {
		f.Edges.namedHasBooking = make(map[string][]*Booking)
	}
	if len(edges) == 0 {
		f.Edges.namedHasBooking[name] = []*Booking{}
	} else {
		f.Edges.namedHasBooking[name] = append(f.Edges.namedHasBooking[name], edges...)
	}
}

// Flights is a parsable slice of Flight.
type Flights []*Flight
