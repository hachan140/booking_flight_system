// Code generated by ent, DO NOT EDIT.

package ent

import (
	"booking-flight-sytem/ent/flight"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Flight is the model entity for the Flight schema.
type Flight struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DepartAt holds the value of the "depart_at" field.
	DepartAt time.Time `json:"depart_at,omitempty"`
	// LandAt holds the value of the "land_at" field.
	LandAt time.Time `json:"land_at,omitempty"`
	// AvailableEcSlot holds the value of the "available_ec_slot" field.
	AvailableEcSlot int `json:"available_ec_slot,omitempty"`
	// AvailableBcSlot holds the value of the "available_bc_slot" field.
	AvailableBcSlot int `json:"available_bc_slot,omitempty"`
	// Status holds the value of the "status" field.
	Status flight.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FlightQuery when eager-loading is set.
	Edges                   FlightEdges `json:"edges"`
	airport_from_airport_id *int
	airport_dest_airport_id *int
	plane_plane_id          *int
	selectValues            sql.SelectValues
}

// FlightEdges holds the relations/edges for other nodes in the graph.
type FlightEdges struct {
	// FlightID holds the value of the flight_id edge.
	FlightID []*Booking `json:"flight_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FlightIDOrErr returns the FlightID value or an error if the edge
// was not loaded in eager-loading.
func (e FlightEdges) FlightIDOrErr() ([]*Booking, error) {
	if e.loadedTypes[0] {
		return e.FlightID, nil
	}
	return nil, &NotLoadedError{edge: "flight_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Flight) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case flight.FieldID, flight.FieldAvailableEcSlot, flight.FieldAvailableBcSlot:
			values[i] = new(sql.NullInt64)
		case flight.FieldName, flight.FieldStatus:
			values[i] = new(sql.NullString)
		case flight.FieldCreatedAt, flight.FieldUpdatedAt, flight.FieldDepartAt, flight.FieldLandAt:
			values[i] = new(sql.NullTime)
		case flight.ForeignKeys[0]: // airport_from_airport_id
			values[i] = new(sql.NullInt64)
		case flight.ForeignKeys[1]: // airport_dest_airport_id
			values[i] = new(sql.NullInt64)
		case flight.ForeignKeys[2]: // plane_plane_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Flight fields.
func (f *Flight) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case flight.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case flight.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case flight.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case flight.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case flight.FieldDepartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field depart_at", values[i])
			} else if value.Valid {
				f.DepartAt = value.Time
			}
		case flight.FieldLandAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field land_at", values[i])
			} else if value.Valid {
				f.LandAt = value.Time
			}
		case flight.FieldAvailableEcSlot:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field available_ec_slot", values[i])
			} else if value.Valid {
				f.AvailableEcSlot = int(value.Int64)
			}
		case flight.FieldAvailableBcSlot:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field available_bc_slot", values[i])
			} else if value.Valid {
				f.AvailableBcSlot = int(value.Int64)
			}
		case flight.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				f.Status = flight.Status(value.String)
			}
		case flight.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field airport_from_airport_id", value)
			} else if value.Valid {
				f.airport_from_airport_id = new(int)
				*f.airport_from_airport_id = int(value.Int64)
			}
		case flight.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field airport_dest_airport_id", value)
			} else if value.Valid {
				f.airport_dest_airport_id = new(int)
				*f.airport_dest_airport_id = int(value.Int64)
			}
		case flight.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field plane_plane_id", value)
			} else if value.Valid {
				f.plane_plane_id = new(int)
				*f.plane_plane_id = int(value.Int64)
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Flight.
// This includes values selected through modifiers, order, etc.
func (f *Flight) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryFlightID queries the "flight_id" edge of the Flight entity.
func (f *Flight) QueryFlightID() *BookingQuery {
	return NewFlightClient(f.config).QueryFlightID(f)
}

// Update returns a builder for updating this Flight.
// Note that you need to call Flight.Unwrap() before calling this method if this Flight
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Flight) Update() *FlightUpdateOne {
	return NewFlightClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Flight entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Flight) Unwrap() *Flight {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Flight is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Flight) String() string {
	var builder strings.Builder
	builder.WriteString("Flight(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(f.Name)
	builder.WriteString(", ")
	builder.WriteString("depart_at=")
	builder.WriteString(f.DepartAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("land_at=")
	builder.WriteString(f.LandAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("available_ec_slot=")
	builder.WriteString(fmt.Sprintf("%v", f.AvailableEcSlot))
	builder.WriteString(", ")
	builder.WriteString("available_bc_slot=")
	builder.WriteString(fmt.Sprintf("%v", f.AvailableBcSlot))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", f.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Flights is a parsable slice of Flight.
type Flights []*Flight
