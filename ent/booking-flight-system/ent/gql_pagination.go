// Code generated by ent, DO NOT EDIT.

package ent

import (
	"booking-flight-system/ent/airport"
	"booking-flight-system/ent/booking"
	"booking-flight-system/ent/customer"
	"booking-flight-system/ent/flight"
	"booking-flight-system/ent/member"
	"booking-flight-system/ent/plane"
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AirportEdge is the edge representation of Airport.
type AirportEdge struct {
	Node   *Airport `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// AirportConnection is the connection containing edges to Airport.
type AirportConnection struct {
	Edges      []*AirportEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *AirportConnection) build(nodes []*Airport, pager *airportPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Airport
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Airport {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Airport {
			return nodes[i]
		}
	}
	c.Edges = make([]*AirportEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AirportEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AirportPaginateOption enables pagination customization.
type AirportPaginateOption func(*airportPager) error

// WithAirportOrder configures pagination ordering.
func WithAirportOrder(order *AirportOrder) AirportPaginateOption {
	if order == nil {
		order = DefaultAirportOrder
	}
	o := *order
	return func(pager *airportPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAirportOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAirportFilter configures pagination filter.
func WithAirportFilter(filter func(*AirportQuery) (*AirportQuery, error)) AirportPaginateOption {
	return func(pager *airportPager) error {
		if filter == nil {
			return errors.New("AirportQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type airportPager struct {
	reverse bool
	order   *AirportOrder
	filter  func(*AirportQuery) (*AirportQuery, error)
}

func newAirportPager(opts []AirportPaginateOption, reverse bool) (*airportPager, error) {
	pager := &airportPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAirportOrder
	}
	return pager, nil
}

func (p *airportPager) applyFilter(query *AirportQuery) (*AirportQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *airportPager) toCursor(a *Airport) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *airportPager) applyCursors(query *AirportQuery, after, before *Cursor) (*AirportQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAirportOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *airportPager) applyOrder(query *AirportQuery) *AirportQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAirportOrder.Field {
		query = query.Order(DefaultAirportOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *airportPager) orderExpr(query *AirportQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAirportOrder.Field {
			b.Comma().Ident(DefaultAirportOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Airport.
func (a *AirportQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AirportPaginateOption,
) (*AirportConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAirportPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &AirportConnection{Edges: []*AirportEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = a.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// AirportOrderField defines the ordering field of Airport.
type AirportOrderField struct {
	// Value extracts the ordering value from the given Airport.
	Value    func(*Airport) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) airport.OrderOption
	toCursor func(*Airport) Cursor
}

// AirportOrder defines the ordering of Airport.
type AirportOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *AirportOrderField `json:"field"`
}

// DefaultAirportOrder is the default ordering of Airport.
var DefaultAirportOrder = &AirportOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AirportOrderField{
		Value: func(a *Airport) (ent.Value, error) {
			return a.ID, nil
		},
		column: airport.FieldID,
		toTerm: airport.ByID,
		toCursor: func(a *Airport) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Airport into AirportEdge.
func (a *Airport) ToEdge(order *AirportOrder) *AirportEdge {
	if order == nil {
		order = DefaultAirportOrder
	}
	return &AirportEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// BookingEdge is the edge representation of Booking.
type BookingEdge struct {
	Node   *Booking `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// BookingConnection is the connection containing edges to Booking.
type BookingConnection struct {
	Edges      []*BookingEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *BookingConnection) build(nodes []*Booking, pager *bookingPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Booking
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Booking {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Booking {
			return nodes[i]
		}
	}
	c.Edges = make([]*BookingEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &BookingEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// BookingPaginateOption enables pagination customization.
type BookingPaginateOption func(*bookingPager) error

// WithBookingOrder configures pagination ordering.
func WithBookingOrder(order *BookingOrder) BookingPaginateOption {
	if order == nil {
		order = DefaultBookingOrder
	}
	o := *order
	return func(pager *bookingPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultBookingOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithBookingFilter configures pagination filter.
func WithBookingFilter(filter func(*BookingQuery) (*BookingQuery, error)) BookingPaginateOption {
	return func(pager *bookingPager) error {
		if filter == nil {
			return errors.New("BookingQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type bookingPager struct {
	reverse bool
	order   *BookingOrder
	filter  func(*BookingQuery) (*BookingQuery, error)
}

func newBookingPager(opts []BookingPaginateOption, reverse bool) (*bookingPager, error) {
	pager := &bookingPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultBookingOrder
	}
	return pager, nil
}

func (p *bookingPager) applyFilter(query *BookingQuery) (*BookingQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *bookingPager) toCursor(b *Booking) Cursor {
	return p.order.Field.toCursor(b)
}

func (p *bookingPager) applyCursors(query *BookingQuery, after, before *Cursor) (*BookingQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultBookingOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *bookingPager) applyOrder(query *BookingQuery) *BookingQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultBookingOrder.Field {
		query = query.Order(DefaultBookingOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *bookingPager) orderExpr(query *BookingQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultBookingOrder.Field {
			b.Comma().Ident(DefaultBookingOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Booking.
func (b *BookingQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BookingPaginateOption,
) (*BookingConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBookingPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if b, err = pager.applyFilter(b); err != nil {
		return nil, err
	}
	conn := &BookingConnection{Edges: []*BookingEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = b.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if b, err = pager.applyCursors(b, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		b.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := b.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	b = pager.applyOrder(b)
	nodes, err := b.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// BookingOrderField defines the ordering field of Booking.
type BookingOrderField struct {
	// Value extracts the ordering value from the given Booking.
	Value    func(*Booking) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) booking.OrderOption
	toCursor func(*Booking) Cursor
}

// BookingOrder defines the ordering of Booking.
type BookingOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *BookingOrderField `json:"field"`
}

// DefaultBookingOrder is the default ordering of Booking.
var DefaultBookingOrder = &BookingOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &BookingOrderField{
		Value: func(b *Booking) (ent.Value, error) {
			return b.ID, nil
		},
		column: booking.FieldID,
		toTerm: booking.ByID,
		toCursor: func(b *Booking) Cursor {
			return Cursor{ID: b.ID}
		},
	},
}

// ToEdge converts Booking into BookingEdge.
func (b *Booking) ToEdge(order *BookingOrder) *BookingEdge {
	if order == nil {
		order = DefaultBookingOrder
	}
	return &BookingEdge{
		Node:   b,
		Cursor: order.Field.toCursor(b),
	}
}

// CustomerEdge is the edge representation of Customer.
type CustomerEdge struct {
	Node   *Customer `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// CustomerConnection is the connection containing edges to Customer.
type CustomerConnection struct {
	Edges      []*CustomerEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *CustomerConnection) build(nodes []*Customer, pager *customerPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Customer
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Customer {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Customer {
			return nodes[i]
		}
	}
	c.Edges = make([]*CustomerEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CustomerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CustomerPaginateOption enables pagination customization.
type CustomerPaginateOption func(*customerPager) error

// WithCustomerOrder configures pagination ordering.
func WithCustomerOrder(order *CustomerOrder) CustomerPaginateOption {
	if order == nil {
		order = DefaultCustomerOrder
	}
	o := *order
	return func(pager *customerPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCustomerOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCustomerFilter configures pagination filter.
func WithCustomerFilter(filter func(*CustomerQuery) (*CustomerQuery, error)) CustomerPaginateOption {
	return func(pager *customerPager) error {
		if filter == nil {
			return errors.New("CustomerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type customerPager struct {
	reverse bool
	order   *CustomerOrder
	filter  func(*CustomerQuery) (*CustomerQuery, error)
}

func newCustomerPager(opts []CustomerPaginateOption, reverse bool) (*customerPager, error) {
	pager := &customerPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCustomerOrder
	}
	return pager, nil
}

func (p *customerPager) applyFilter(query *CustomerQuery) (*CustomerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *customerPager) toCursor(c *Customer) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *customerPager) applyCursors(query *CustomerQuery, after, before *Cursor) (*CustomerQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCustomerOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *customerPager) applyOrder(query *CustomerQuery) *CustomerQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCustomerOrder.Field {
		query = query.Order(DefaultCustomerOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *customerPager) orderExpr(query *CustomerQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCustomerOrder.Field {
			b.Comma().Ident(DefaultCustomerOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Customer.
func (c *CustomerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CustomerPaginateOption,
) (*CustomerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCustomerPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CustomerConnection{Edges: []*CustomerEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = c.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CustomerOrderField defines the ordering field of Customer.
type CustomerOrderField struct {
	// Value extracts the ordering value from the given Customer.
	Value    func(*Customer) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) customer.OrderOption
	toCursor func(*Customer) Cursor
}

// CustomerOrder defines the ordering of Customer.
type CustomerOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *CustomerOrderField `json:"field"`
}

// DefaultCustomerOrder is the default ordering of Customer.
var DefaultCustomerOrder = &CustomerOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CustomerOrderField{
		Value: func(c *Customer) (ent.Value, error) {
			return c.ID, nil
		},
		column: customer.FieldID,
		toTerm: customer.ByID,
		toCursor: func(c *Customer) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Customer into CustomerEdge.
func (c *Customer) ToEdge(order *CustomerOrder) *CustomerEdge {
	if order == nil {
		order = DefaultCustomerOrder
	}
	return &CustomerEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// FlightEdge is the edge representation of Flight.
type FlightEdge struct {
	Node   *Flight `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// FlightConnection is the connection containing edges to Flight.
type FlightConnection struct {
	Edges      []*FlightEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *FlightConnection) build(nodes []*Flight, pager *flightPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Flight
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Flight {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Flight {
			return nodes[i]
		}
	}
	c.Edges = make([]*FlightEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &FlightEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// FlightPaginateOption enables pagination customization.
type FlightPaginateOption func(*flightPager) error

// WithFlightOrder configures pagination ordering.
func WithFlightOrder(order *FlightOrder) FlightPaginateOption {
	if order == nil {
		order = DefaultFlightOrder
	}
	o := *order
	return func(pager *flightPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFlightOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFlightFilter configures pagination filter.
func WithFlightFilter(filter func(*FlightQuery) (*FlightQuery, error)) FlightPaginateOption {
	return func(pager *flightPager) error {
		if filter == nil {
			return errors.New("FlightQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type flightPager struct {
	reverse bool
	order   *FlightOrder
	filter  func(*FlightQuery) (*FlightQuery, error)
}

func newFlightPager(opts []FlightPaginateOption, reverse bool) (*flightPager, error) {
	pager := &flightPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFlightOrder
	}
	return pager, nil
}

func (p *flightPager) applyFilter(query *FlightQuery) (*FlightQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *flightPager) toCursor(f *Flight) Cursor {
	return p.order.Field.toCursor(f)
}

func (p *flightPager) applyCursors(query *FlightQuery, after, before *Cursor) (*FlightQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultFlightOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *flightPager) applyOrder(query *FlightQuery) *FlightQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultFlightOrder.Field {
		query = query.Order(DefaultFlightOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *flightPager) orderExpr(query *FlightQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultFlightOrder.Field {
			b.Comma().Ident(DefaultFlightOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Flight.
func (f *FlightQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FlightPaginateOption,
) (*FlightConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFlightPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if f, err = pager.applyFilter(f); err != nil {
		return nil, err
	}
	conn := &FlightConnection{Edges: []*FlightEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = f.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if f, err = pager.applyCursors(f, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		f.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := f.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	f = pager.applyOrder(f)
	nodes, err := f.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// FlightOrderField defines the ordering field of Flight.
type FlightOrderField struct {
	// Value extracts the ordering value from the given Flight.
	Value    func(*Flight) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) flight.OrderOption
	toCursor func(*Flight) Cursor
}

// FlightOrder defines the ordering of Flight.
type FlightOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *FlightOrderField `json:"field"`
}

// DefaultFlightOrder is the default ordering of Flight.
var DefaultFlightOrder = &FlightOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &FlightOrderField{
		Value: func(f *Flight) (ent.Value, error) {
			return f.ID, nil
		},
		column: flight.FieldID,
		toTerm: flight.ByID,
		toCursor: func(f *Flight) Cursor {
			return Cursor{ID: f.ID}
		},
	},
}

// ToEdge converts Flight into FlightEdge.
func (f *Flight) ToEdge(order *FlightOrder) *FlightEdge {
	if order == nil {
		order = DefaultFlightOrder
	}
	return &FlightEdge{
		Node:   f,
		Cursor: order.Field.toCursor(f),
	}
}

// MemberEdge is the edge representation of Member.
type MemberEdge struct {
	Node   *Member `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// MemberConnection is the connection containing edges to Member.
type MemberConnection struct {
	Edges      []*MemberEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *MemberConnection) build(nodes []*Member, pager *memberPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Member
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Member {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Member {
			return nodes[i]
		}
	}
	c.Edges = make([]*MemberEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MemberEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MemberPaginateOption enables pagination customization.
type MemberPaginateOption func(*memberPager) error

// WithMemberOrder configures pagination ordering.
func WithMemberOrder(order *MemberOrder) MemberPaginateOption {
	if order == nil {
		order = DefaultMemberOrder
	}
	o := *order
	return func(pager *memberPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMemberOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMemberFilter configures pagination filter.
func WithMemberFilter(filter func(*MemberQuery) (*MemberQuery, error)) MemberPaginateOption {
	return func(pager *memberPager) error {
		if filter == nil {
			return errors.New("MemberQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type memberPager struct {
	reverse bool
	order   *MemberOrder
	filter  func(*MemberQuery) (*MemberQuery, error)
}

func newMemberPager(opts []MemberPaginateOption, reverse bool) (*memberPager, error) {
	pager := &memberPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMemberOrder
	}
	return pager, nil
}

func (p *memberPager) applyFilter(query *MemberQuery) (*MemberQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *memberPager) toCursor(m *Member) Cursor {
	return p.order.Field.toCursor(m)
}

func (p *memberPager) applyCursors(query *MemberQuery, after, before *Cursor) (*MemberQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultMemberOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *memberPager) applyOrder(query *MemberQuery) *MemberQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultMemberOrder.Field {
		query = query.Order(DefaultMemberOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *memberPager) orderExpr(query *MemberQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultMemberOrder.Field {
			b.Comma().Ident(DefaultMemberOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Member.
func (m *MemberQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MemberPaginateOption,
) (*MemberConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMemberPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if m, err = pager.applyFilter(m); err != nil {
		return nil, err
	}
	conn := &MemberConnection{Edges: []*MemberEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = m.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if m, err = pager.applyCursors(m, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := m.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	m = pager.applyOrder(m)
	nodes, err := m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// MemberOrderFieldCreatedAt orders Member by created_at.
	MemberOrderFieldCreatedAt = &MemberOrderField{
		Value: func(m *Member) (ent.Value, error) {
			return m.CreatedAt, nil
		},
		column: member.FieldCreatedAt,
		toTerm: member.ByCreatedAt,
		toCursor: func(m *Member) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.CreatedAt,
			}
		},
	}
	// MemberOrderFieldUpdatedAt orders Member by updated_at.
	MemberOrderFieldUpdatedAt = &MemberOrderField{
		Value: func(m *Member) (ent.Value, error) {
			return m.UpdatedAt, nil
		},
		column: member.FieldUpdatedAt,
		toTerm: member.ByUpdatedAt,
		toCursor: func(m *Member) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.UpdatedAt,
			}
		},
	}
	// MemberOrderFieldEmail orders Member by email.
	MemberOrderFieldEmail = &MemberOrderField{
		Value: func(m *Member) (ent.Value, error) {
			return m.Email, nil
		},
		column: member.FieldEmail,
		toTerm: member.ByEmail,
		toCursor: func(m *Member) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.Email,
			}
		},
	}
	// MemberOrderFieldPassword orders Member by password.
	MemberOrderFieldPassword = &MemberOrderField{
		Value: func(m *Member) (ent.Value, error) {
			return m.Password, nil
		},
		column: member.FieldPassword,
		toTerm: member.ByPassword,
		toCursor: func(m *Member) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.Password,
			}
		},
	}
	// MemberOrderFieldPhoneNumber orders Member by phone_number.
	MemberOrderFieldPhoneNumber = &MemberOrderField{
		Value: func(m *Member) (ent.Value, error) {
			return m.PhoneNumber, nil
		},
		column: member.FieldPhoneNumber,
		toTerm: member.ByPhoneNumber,
		toCursor: func(m *Member) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.PhoneNumber,
			}
		},
	}
	// MemberOrderFieldFullName orders Member by full_name.
	MemberOrderFieldFullName = &MemberOrderField{
		Value: func(m *Member) (ent.Value, error) {
			return m.FullName, nil
		},
		column: member.FieldFullName,
		toTerm: member.ByFullName,
		toCursor: func(m *Member) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.FullName,
			}
		},
	}
	// MemberOrderFieldDob orders Member by dob.
	MemberOrderFieldDob = &MemberOrderField{
		Value: func(m *Member) (ent.Value, error) {
			return m.Dob, nil
		},
		column: member.FieldDob,
		toTerm: member.ByDob,
		toCursor: func(m *Member) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.Dob,
			}
		},
	}
	// MemberOrderFieldCid orders Member by cid.
	MemberOrderFieldCid = &MemberOrderField{
		Value: func(m *Member) (ent.Value, error) {
			return m.Cid, nil
		},
		column: member.FieldCid,
		toTerm: member.ByCid,
		toCursor: func(m *Member) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.Cid,
			}
		},
	}
	// MemberOrderFieldRole orders Member by role.
	MemberOrderFieldRole = &MemberOrderField{
		Value: func(m *Member) (ent.Value, error) {
			return m.Role, nil
		},
		column: member.FieldRole,
		toTerm: member.ByRole,
		toCursor: func(m *Member) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.Role,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MemberOrderField) String() string {
	var str string
	switch f.column {
	case MemberOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case MemberOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case MemberOrderFieldEmail.column:
		str = "EMAIL"
	case MemberOrderFieldPassword.column:
		str = "PASSWORD"
	case MemberOrderFieldPhoneNumber.column:
		str = "PHONE_NUMBER"
	case MemberOrderFieldFullName.column:
		str = "FULL_NAME"
	case MemberOrderFieldDob.column:
		str = "DOB"
	case MemberOrderFieldCid.column:
		str = "CID"
	case MemberOrderFieldRole.column:
		str = "ROLE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MemberOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MemberOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MemberOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *MemberOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *MemberOrderFieldUpdatedAt
	case "EMAIL":
		*f = *MemberOrderFieldEmail
	case "PASSWORD":
		*f = *MemberOrderFieldPassword
	case "PHONE_NUMBER":
		*f = *MemberOrderFieldPhoneNumber
	case "FULL_NAME":
		*f = *MemberOrderFieldFullName
	case "DOB":
		*f = *MemberOrderFieldDob
	case "CID":
		*f = *MemberOrderFieldCid
	case "ROLE":
		*f = *MemberOrderFieldRole
	default:
		return fmt.Errorf("%s is not a valid MemberOrderField", str)
	}
	return nil
}

// MemberOrderField defines the ordering field of Member.
type MemberOrderField struct {
	// Value extracts the ordering value from the given Member.
	Value    func(*Member) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) member.OrderOption
	toCursor func(*Member) Cursor
}

// MemberOrder defines the ordering of Member.
type MemberOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *MemberOrderField `json:"field"`
}

// DefaultMemberOrder is the default ordering of Member.
var DefaultMemberOrder = &MemberOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &MemberOrderField{
		Value: func(m *Member) (ent.Value, error) {
			return m.ID, nil
		},
		column: member.FieldID,
		toTerm: member.ByID,
		toCursor: func(m *Member) Cursor {
			return Cursor{ID: m.ID}
		},
	},
}

// ToEdge converts Member into MemberEdge.
func (m *Member) ToEdge(order *MemberOrder) *MemberEdge {
	if order == nil {
		order = DefaultMemberOrder
	}
	return &MemberEdge{
		Node:   m,
		Cursor: order.Field.toCursor(m),
	}
}

// PlaneEdge is the edge representation of Plane.
type PlaneEdge struct {
	Node   *Plane `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// PlaneConnection is the connection containing edges to Plane.
type PlaneConnection struct {
	Edges      []*PlaneEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *PlaneConnection) build(nodes []*Plane, pager *planePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Plane
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Plane {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Plane {
			return nodes[i]
		}
	}
	c.Edges = make([]*PlaneEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PlaneEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PlanePaginateOption enables pagination customization.
type PlanePaginateOption func(*planePager) error

// WithPlaneOrder configures pagination ordering.
func WithPlaneOrder(order *PlaneOrder) PlanePaginateOption {
	if order == nil {
		order = DefaultPlaneOrder
	}
	o := *order
	return func(pager *planePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPlaneOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPlaneFilter configures pagination filter.
func WithPlaneFilter(filter func(*PlaneQuery) (*PlaneQuery, error)) PlanePaginateOption {
	return func(pager *planePager) error {
		if filter == nil {
			return errors.New("PlaneQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type planePager struct {
	reverse bool
	order   *PlaneOrder
	filter  func(*PlaneQuery) (*PlaneQuery, error)
}

func newPlanePager(opts []PlanePaginateOption, reverse bool) (*planePager, error) {
	pager := &planePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPlaneOrder
	}
	return pager, nil
}

func (p *planePager) applyFilter(query *PlaneQuery) (*PlaneQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *planePager) toCursor(pl *Plane) Cursor {
	return p.order.Field.toCursor(pl)
}

func (p *planePager) applyCursors(query *PlaneQuery, after, before *Cursor) (*PlaneQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPlaneOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *planePager) applyOrder(query *PlaneQuery) *PlaneQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPlaneOrder.Field {
		query = query.Order(DefaultPlaneOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *planePager) orderExpr(query *PlaneQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPlaneOrder.Field {
			b.Comma().Ident(DefaultPlaneOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Plane.
func (pl *PlaneQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PlanePaginateOption,
) (*PlaneConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPlanePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pl, err = pager.applyFilter(pl); err != nil {
		return nil, err
	}
	conn := &PlaneConnection{Edges: []*PlaneEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pl.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pl, err = pager.applyCursors(pl, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		pl.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pl.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pl = pager.applyOrder(pl)
	nodes, err := pl.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PlaneOrderField defines the ordering field of Plane.
type PlaneOrderField struct {
	// Value extracts the ordering value from the given Plane.
	Value    func(*Plane) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) plane.OrderOption
	toCursor func(*Plane) Cursor
}

// PlaneOrder defines the ordering of Plane.
type PlaneOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *PlaneOrderField `json:"field"`
}

// DefaultPlaneOrder is the default ordering of Plane.
var DefaultPlaneOrder = &PlaneOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PlaneOrderField{
		Value: func(pl *Plane) (ent.Value, error) {
			return pl.ID, nil
		},
		column: plane.FieldID,
		toTerm: plane.ByID,
		toCursor: func(pl *Plane) Cursor {
			return Cursor{ID: pl.ID}
		},
	},
}

// ToEdge converts Plane into PlaneEdge.
func (pl *Plane) ToEdge(order *PlaneOrder) *PlaneEdge {
	if order == nil {
		order = DefaultPlaneOrder
	}
	return &PlaneEdge{
		Node:   pl,
		Cursor: order.Field.toCursor(pl),
	}
}
