// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateMemberInput represents a mutation input for creating members.
type CreateMemberInput struct {
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	Email          string
	Password       string
	PhoneNumber    string
	FullName       string
	Dob            time.Time
	Cid            string
	Role           *int
	HasCustomerIDs []int
}

// Mutate applies the CreateMemberInput on the MemberMutation builder.
func (i *CreateMemberInput) Mutate(m *MemberMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetEmail(i.Email)
	m.SetPassword(i.Password)
	m.SetPhoneNumber(i.PhoneNumber)
	m.SetFullName(i.FullName)
	m.SetDob(i.Dob)
	m.SetCid(i.Cid)
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.HasCustomerIDs; len(v) > 0 {
		m.AddHasCustomerIDs(v...)
	}
}

// SetInput applies the change-set in the CreateMemberInput on the MemberCreate builder.
func (c *MemberCreate) SetInput(i CreateMemberInput) *MemberCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMemberInput represents a mutation input for updating members.
type UpdateMemberInput struct {
	CreatedAt            *time.Time
	UpdatedAt            *time.Time
	Email                *string
	Password             *string
	PhoneNumber          *string
	FullName             *string
	Dob                  *time.Time
	Cid                  *string
	Role                 *int
	ClearHasCustomer     bool
	AddHasCustomerIDs    []int
	RemoveHasCustomerIDs []int
}

// Mutate applies the UpdateMemberInput on the MemberMutation builder.
func (i *UpdateMemberInput) Mutate(m *MemberMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.PhoneNumber; v != nil {
		m.SetPhoneNumber(*v)
	}
	if v := i.FullName; v != nil {
		m.SetFullName(*v)
	}
	if v := i.Dob; v != nil {
		m.SetDob(*v)
	}
	if v := i.Cid; v != nil {
		m.SetCid(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if i.ClearHasCustomer {
		m.ClearHasCustomer()
	}
	if v := i.AddHasCustomerIDs; len(v) > 0 {
		m.AddHasCustomerIDs(v...)
	}
	if v := i.RemoveHasCustomerIDs; len(v) > 0 {
		m.RemoveHasCustomerIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateMemberInput on the MemberUpdate builder.
func (c *MemberUpdate) SetInput(i UpdateMemberInput) *MemberUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMemberInput on the MemberUpdateOne builder.
func (c *MemberUpdateOne) SetInput(i UpdateMemberInput) *MemberUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
