// Code generated by ent, DO NOT EDIT.

package ent

import (
	"booking-flight-system/ent/booking"
	"booking-flight-system/ent/flight"
	"booking-flight-system/ent/member"
	"booking-flight-system/ent/plane"
	"time"
)

// CreateAirportInput represents a mutation input for creating airports.
type CreateAirportInput struct {
	CreatedAt     *time.Time
	UpdatedAt     *time.Time
	Name          string
	Lat           float64
	Long          float64
	FromFlightIDs []int
	ToFlightIDs   []int
}

// Mutate applies the CreateAirportInput on the AirportMutation builder.
func (i *CreateAirportInput) Mutate(m *AirportMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetLat(i.Lat)
	m.SetLong(i.Long)
	if v := i.FromFlightIDs; len(v) > 0 {
		m.AddFromFlightIDs(v...)
	}
	if v := i.ToFlightIDs; len(v) > 0 {
		m.AddToFlightIDs(v...)
	}
}

// SetInput applies the change-set in the CreateAirportInput on the AirportCreate builder.
func (c *AirportCreate) SetInput(i CreateAirportInput) *AirportCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAirportInput represents a mutation input for updating airports.
type UpdateAirportInput struct {
	CreatedAt           *time.Time
	UpdatedAt           *time.Time
	Name                *string
	Lat                 *float64
	Long                *float64
	ClearFromFlight     bool
	AddFromFlightIDs    []int
	RemoveFromFlightIDs []int
	ClearToFlight       bool
	AddToFlightIDs      []int
	RemoveToFlightIDs   []int
}

// Mutate applies the UpdateAirportInput on the AirportMutation builder.
func (i *UpdateAirportInput) Mutate(m *AirportMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Lat; v != nil {
		m.SetLat(*v)
	}
	if v := i.Long; v != nil {
		m.SetLong(*v)
	}
	if i.ClearFromFlight {
		m.ClearFromFlight()
	}
	if v := i.AddFromFlightIDs; len(v) > 0 {
		m.AddFromFlightIDs(v...)
	}
	if v := i.RemoveFromFlightIDs; len(v) > 0 {
		m.RemoveFromFlightIDs(v...)
	}
	if i.ClearToFlight {
		m.ClearToFlight()
	}
	if v := i.AddToFlightIDs; len(v) > 0 {
		m.AddToFlightIDs(v...)
	}
	if v := i.RemoveToFlightIDs; len(v) > 0 {
		m.RemoveToFlightIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateAirportInput on the AirportUpdate builder.
func (c *AirportUpdate) SetInput(i UpdateAirportInput) *AirportUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAirportInput on the AirportUpdateOne builder.
func (c *AirportUpdateOne) SetInput(i UpdateAirportInput) *AirportUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateBookingInput represents a mutation input for creating bookings.
type CreateBookingInput struct {
	CreatedAt     *time.Time
	UpdatedAt     *time.Time
	Code          string
	Status        booking.Status
	SeatType      booking.SeatType
	HasFlightID   *int
	HasCustomerID *int
}

// Mutate applies the CreateBookingInput on the BookingMutation builder.
func (i *CreateBookingInput) Mutate(m *BookingMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetCode(i.Code)
	m.SetStatus(i.Status)
	m.SetSeatType(i.SeatType)
	if v := i.HasFlightID; v != nil {
		m.SetHasFlightID(*v)
	}
	if v := i.HasCustomerID; v != nil {
		m.SetHasCustomerID(*v)
	}
}

// SetInput applies the change-set in the CreateBookingInput on the BookingCreate builder.
func (c *BookingCreate) SetInput(i CreateBookingInput) *BookingCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateBookingInput represents a mutation input for updating bookings.
type UpdateBookingInput struct {
	CreatedAt        *time.Time
	UpdatedAt        *time.Time
	Code             *string
	Status           *booking.Status
	SeatType         *booking.SeatType
	ClearHasFlight   bool
	HasFlightID      *int
	ClearHasCustomer bool
	HasCustomerID    *int
}

// Mutate applies the UpdateBookingInput on the BookingMutation builder.
func (i *UpdateBookingInput) Mutate(m *BookingMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.SeatType; v != nil {
		m.SetSeatType(*v)
	}
	if i.ClearHasFlight {
		m.ClearHasFlight()
	}
	if v := i.HasFlightID; v != nil {
		m.SetHasFlightID(*v)
	}
	if i.ClearHasCustomer {
		m.ClearHasCustomer()
	}
	if v := i.HasCustomerID; v != nil {
		m.SetHasCustomerID(*v)
	}
}

// SetInput applies the change-set in the UpdateBookingInput on the BookingUpdate builder.
func (c *BookingUpdate) SetInput(i UpdateBookingInput) *BookingUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateBookingInput on the BookingUpdateOne builder.
func (c *BookingUpdateOne) SetInput(i UpdateBookingInput) *BookingUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCustomerInput represents a mutation input for creating customers.
type CreateCustomerInput struct {
	CreatedAt     *time.Time
	UpdatedAt     *time.Time
	Email         string
	PhoneNumber   string
	FullName      string
	Dob           *time.Time
	Cid           string
	HasMemberID   *int
	HasBookingIDs []int
}

// Mutate applies the CreateCustomerInput on the CustomerMutation builder.
func (i *CreateCustomerInput) Mutate(m *CustomerMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetEmail(i.Email)
	m.SetPhoneNumber(i.PhoneNumber)
	m.SetFullName(i.FullName)
	if v := i.Dob; v != nil {
		m.SetDob(*v)
	}
	m.SetCid(i.Cid)
	if v := i.HasMemberID; v != nil {
		m.SetHasMemberID(*v)
	}
	if v := i.HasBookingIDs; len(v) > 0 {
		m.AddHasBookingIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCustomerInput on the CustomerCreate builder.
func (c *CustomerCreate) SetInput(i CreateCustomerInput) *CustomerCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCustomerInput represents a mutation input for updating customers.
type UpdateCustomerInput struct {
	CreatedAt           *time.Time
	UpdatedAt           *time.Time
	Email               *string
	PhoneNumber         *string
	FullName            *string
	ClearDob            bool
	Dob                 *time.Time
	Cid                 *string
	ClearHasMember      bool
	HasMemberID         *int
	ClearHasBooking     bool
	AddHasBookingIDs    []int
	RemoveHasBookingIDs []int
}

// Mutate applies the UpdateCustomerInput on the CustomerMutation builder.
func (i *UpdateCustomerInput) Mutate(m *CustomerMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.PhoneNumber; v != nil {
		m.SetPhoneNumber(*v)
	}
	if v := i.FullName; v != nil {
		m.SetFullName(*v)
	}
	if i.ClearDob {
		m.ClearDob()
	}
	if v := i.Dob; v != nil {
		m.SetDob(*v)
	}
	if v := i.Cid; v != nil {
		m.SetCid(*v)
	}
	if i.ClearHasMember {
		m.ClearHasMember()
	}
	if v := i.HasMemberID; v != nil {
		m.SetHasMemberID(*v)
	}
	if i.ClearHasBooking {
		m.ClearHasBooking()
	}
	if v := i.AddHasBookingIDs; len(v) > 0 {
		m.AddHasBookingIDs(v...)
	}
	if v := i.RemoveHasBookingIDs; len(v) > 0 {
		m.RemoveHasBookingIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdate builder.
func (c *CustomerUpdate) SetInput(i UpdateCustomerInput) *CustomerUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdateOne builder.
func (c *CustomerUpdateOne) SetInput(i UpdateCustomerInput) *CustomerUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateFlightInput represents a mutation input for creating flights.
type CreateFlightInput struct {
	CreatedAt       *time.Time
	UpdatedAt       *time.Time
	Name            string
	DepartAt        time.Time
	LandAt          time.Time
	AvailableEcSlot int
	AvailableBcSlot int
	Status          *flight.Status
	HasPlaneID      *int
	HasBookingIDs   []int
	FromAirportID   *int
	ToAirportID     *int
}

// Mutate applies the CreateFlightInput on the FlightMutation builder.
func (i *CreateFlightInput) Mutate(m *FlightMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetDepartAt(i.DepartAt)
	m.SetLandAt(i.LandAt)
	m.SetAvailableEcSlot(i.AvailableEcSlot)
	m.SetAvailableBcSlot(i.AvailableBcSlot)
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.HasPlaneID; v != nil {
		m.SetHasPlaneID(*v)
	}
	if v := i.HasBookingIDs; len(v) > 0 {
		m.AddHasBookingIDs(v...)
	}
	if v := i.FromAirportID; v != nil {
		m.SetFromAirportID(*v)
	}
	if v := i.ToAirportID; v != nil {
		m.SetToAirportID(*v)
	}
}

// SetInput applies the change-set in the CreateFlightInput on the FlightCreate builder.
func (c *FlightCreate) SetInput(i CreateFlightInput) *FlightCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateFlightInput represents a mutation input for updating flights.
type UpdateFlightInput struct {
	CreatedAt           *time.Time
	UpdatedAt           *time.Time
	Name                *string
	DepartAt            *time.Time
	LandAt              *time.Time
	AvailableEcSlot     *int
	AvailableBcSlot     *int
	Status              *flight.Status
	ClearHasPlane       bool
	HasPlaneID          *int
	ClearHasBooking     bool
	AddHasBookingIDs    []int
	RemoveHasBookingIDs []int
	ClearFromAirport    bool
	FromAirportID       *int
	ClearToAirport      bool
	ToAirportID         *int
}

// Mutate applies the UpdateFlightInput on the FlightMutation builder.
func (i *UpdateFlightInput) Mutate(m *FlightMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.DepartAt; v != nil {
		m.SetDepartAt(*v)
	}
	if v := i.LandAt; v != nil {
		m.SetLandAt(*v)
	}
	if v := i.AvailableEcSlot; v != nil {
		m.SetAvailableEcSlot(*v)
	}
	if v := i.AvailableBcSlot; v != nil {
		m.SetAvailableBcSlot(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearHasPlane {
		m.ClearHasPlane()
	}
	if v := i.HasPlaneID; v != nil {
		m.SetHasPlaneID(*v)
	}
	if i.ClearHasBooking {
		m.ClearHasBooking()
	}
	if v := i.AddHasBookingIDs; len(v) > 0 {
		m.AddHasBookingIDs(v...)
	}
	if v := i.RemoveHasBookingIDs; len(v) > 0 {
		m.RemoveHasBookingIDs(v...)
	}
	if i.ClearFromAirport {
		m.ClearFromAirport()
	}
	if v := i.FromAirportID; v != nil {
		m.SetFromAirportID(*v)
	}
	if i.ClearToAirport {
		m.ClearToAirport()
	}
	if v := i.ToAirportID; v != nil {
		m.SetToAirportID(*v)
	}
}

// SetInput applies the change-set in the UpdateFlightInput on the FlightUpdate builder.
func (c *FlightUpdate) SetInput(i UpdateFlightInput) *FlightUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateFlightInput on the FlightUpdateOne builder.
func (c *FlightUpdateOne) SetInput(i UpdateFlightInput) *FlightUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateMemberInput represents a mutation input for creating members.
type CreateMemberInput struct {
	CreatedAt     *time.Time
	UpdatedAt     *time.Time
	Email         string
	Password      string
	PhoneNumber   string
	FullName      string
	Dob           *time.Time
	Cid           string
	MemberType    *member.MemberType
	HasCustomerID *int
}

// Mutate applies the CreateMemberInput on the MemberMutation builder.
func (i *CreateMemberInput) Mutate(m *MemberMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetEmail(i.Email)
	m.SetPassword(i.Password)
	m.SetPhoneNumber(i.PhoneNumber)
	m.SetFullName(i.FullName)
	if v := i.Dob; v != nil {
		m.SetDob(*v)
	}
	m.SetCid(i.Cid)
	if v := i.MemberType; v != nil {
		m.SetMemberType(*v)
	}
	if v := i.HasCustomerID; v != nil {
		m.SetHasCustomerID(*v)
	}
}

// SetInput applies the change-set in the CreateMemberInput on the MemberCreate builder.
func (c *MemberCreate) SetInput(i CreateMemberInput) *MemberCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMemberInput represents a mutation input for updating members.
type UpdateMemberInput struct {
	CreatedAt        *time.Time
	UpdatedAt        *time.Time
	Email            *string
	Password         *string
	PhoneNumber      *string
	FullName         *string
	ClearDob         bool
	Dob              *time.Time
	Cid              *string
	ClearMemberType  bool
	MemberType       *member.MemberType
	ClearHasCustomer bool
	HasCustomerID    *int
}

// Mutate applies the UpdateMemberInput on the MemberMutation builder.
func (i *UpdateMemberInput) Mutate(m *MemberMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.PhoneNumber; v != nil {
		m.SetPhoneNumber(*v)
	}
	if v := i.FullName; v != nil {
		m.SetFullName(*v)
	}
	if i.ClearDob {
		m.ClearDob()
	}
	if v := i.Dob; v != nil {
		m.SetDob(*v)
	}
	if v := i.Cid; v != nil {
		m.SetCid(*v)
	}
	if i.ClearMemberType {
		m.ClearMemberType()
	}
	if v := i.MemberType; v != nil {
		m.SetMemberType(*v)
	}
	if i.ClearHasCustomer {
		m.ClearHasCustomer()
	}
	if v := i.HasCustomerID; v != nil {
		m.SetHasCustomerID(*v)
	}
}

// SetInput applies the change-set in the UpdateMemberInput on the MemberUpdate builder.
func (c *MemberUpdate) SetInput(i UpdateMemberInput) *MemberUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMemberInput on the MemberUpdateOne builder.
func (c *MemberUpdateOne) SetInput(i UpdateMemberInput) *MemberUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePlaneInput represents a mutation input for creating planes.
type CreatePlaneInput struct {
	CreatedAt          *time.Time
	UpdatedAt          *time.Time
	Name               string
	EconomyClassSlots  *int64
	BusinessClassSlots *int64
	Status             *plane.Status
	FlightIDs          []int
}

// Mutate applies the CreatePlaneInput on the PlaneMutation builder.
func (i *CreatePlaneInput) Mutate(m *PlaneMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	if v := i.EconomyClassSlots; v != nil {
		m.SetEconomyClassSlots(*v)
	}
	if v := i.BusinessClassSlots; v != nil {
		m.SetBusinessClassSlots(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.FlightIDs; len(v) > 0 {
		m.AddFlightIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePlaneInput on the PlaneCreate builder.
func (c *PlaneCreate) SetInput(i CreatePlaneInput) *PlaneCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePlaneInput represents a mutation input for updating planes.
type UpdatePlaneInput struct {
	CreatedAt          *time.Time
	UpdatedAt          *time.Time
	Name               *string
	EconomyClassSlots  *int64
	BusinessClassSlots *int64
	Status             *plane.Status
	ClearFlights       bool
	AddFlightIDs       []int
	RemoveFlightIDs    []int
}

// Mutate applies the UpdatePlaneInput on the PlaneMutation builder.
func (i *UpdatePlaneInput) Mutate(m *PlaneMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.EconomyClassSlots; v != nil {
		m.SetEconomyClassSlots(*v)
	}
	if v := i.BusinessClassSlots; v != nil {
		m.SetBusinessClassSlots(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearFlights {
		m.ClearFlights()
	}
	if v := i.AddFlightIDs; len(v) > 0 {
		m.AddFlightIDs(v...)
	}
	if v := i.RemoveFlightIDs; len(v) > 0 {
		m.RemoveFlightIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePlaneInput on the PlaneUpdate builder.
func (c *PlaneUpdate) SetInput(i UpdatePlaneInput) *PlaneUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePlaneInput on the PlaneUpdateOne builder.
func (c *PlaneUpdateOne) SetInput(i UpdatePlaneInput) *PlaneUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
