// Code generated by ent, DO NOT EDIT.

package ent

import (
	"booking-flight-sytem/ent/customer"
	"booking-flight-sytem/ent/flight"
	"booking-flight-sytem/ent/member"
	"booking-flight-sytem/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerMutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CustomerUpdate) SetCreatedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCreatedAt(t *time.Time) *CustomerUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CustomerUpdate) SetUpdatedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetEmail sets the "email" field.
func (cu *CustomerUpdate) SetEmail(s string) *CustomerUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetPhoneNumber sets the "phone_number" field.
func (cu *CustomerUpdate) SetPhoneNumber(s string) *CustomerUpdate {
	cu.mutation.SetPhoneNumber(s)
	return cu
}

// SetFullName sets the "full_name" field.
func (cu *CustomerUpdate) SetFullName(s string) *CustomerUpdate {
	cu.mutation.SetFullName(s)
	return cu
}

// SetDob sets the "dob" field.
func (cu *CustomerUpdate) SetDob(t time.Time) *CustomerUpdate {
	cu.mutation.SetDob(t)
	return cu
}

// SetCid sets the "cid" field.
func (cu *CustomerUpdate) SetCid(s string) *CustomerUpdate {
	cu.mutation.SetCid(s)
	return cu
}

// SetMemberID sets the "member_id" field.
func (cu *CustomerUpdate) SetMemberID(i int) *CustomerUpdate {
	cu.mutation.SetMemberID(i)
	return cu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableMemberID(i *int) *CustomerUpdate {
	if i != nil {
		cu.SetMemberID(*i)
	}
	return cu
}

// ClearMemberID clears the value of the "member_id" field.
func (cu *CustomerUpdate) ClearMemberID() *CustomerUpdate {
	cu.mutation.ClearMemberID()
	return cu
}

// SetHasMemberID sets the "has_Member" edge to the Member entity by ID.
func (cu *CustomerUpdate) SetHasMemberID(id int) *CustomerUpdate {
	cu.mutation.SetHasMemberID(id)
	return cu
}

// SetNillableHasMemberID sets the "has_Member" edge to the Member entity by ID if the given value is not nil.
func (cu *CustomerUpdate) SetNillableHasMemberID(id *int) *CustomerUpdate {
	if id != nil {
		cu = cu.SetHasMemberID(*id)
	}
	return cu
}

// SetHasMember sets the "has_Member" edge to the Member entity.
func (cu *CustomerUpdate) SetHasMember(m *Member) *CustomerUpdate {
	return cu.SetHasMemberID(m.ID)
}

// AddHasFlightIDs adds the "has_Flight" edge to the Flight entity by IDs.
func (cu *CustomerUpdate) AddHasFlightIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddHasFlightIDs(ids...)
	return cu
}

// AddHasFlight adds the "has_Flight" edges to the Flight entity.
func (cu *CustomerUpdate) AddHasFlight(f ...*Flight) *CustomerUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cu.AddHasFlightIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// ClearHasMember clears the "has_Member" edge to the Member entity.
func (cu *CustomerUpdate) ClearHasMember() *CustomerUpdate {
	cu.mutation.ClearHasMember()
	return cu
}

// ClearHasFlight clears all "has_Flight" edges to the Flight entity.
func (cu *CustomerUpdate) ClearHasFlight() *CustomerUpdate {
	cu.mutation.ClearHasFlight()
	return cu
}

// RemoveHasFlightIDs removes the "has_Flight" edge to Flight entities by IDs.
func (cu *CustomerUpdate) RemoveHasFlightIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveHasFlightIDs(ids...)
	return cu
}

// RemoveHasFlight removes "has_Flight" edges to Flight entities.
func (cu *CustomerUpdate) RemoveHasFlight(f ...*Flight) *CustomerUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cu.RemoveHasFlightIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CustomerUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := customer.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CustomerUpdate) check() error {
	if v, ok := cu.mutation.Email(); ok {
		if err := customer.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Customer.email": %w`, err)}
		}
	}
	if v, ok := cu.mutation.PhoneNumber(); ok {
		if err := customer.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Customer.phone_number": %w`, err)}
		}
	}
	if v, ok := cu.mutation.FullName(); ok {
		if err := customer.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "Customer.full_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Cid(); ok {
		if err := customer.CidValidator(v); err != nil {
			return &ValidationError{Name: "cid", err: fmt.Errorf(`ent: validator failed for field "Customer.cid": %w`, err)}
		}
	}
	return nil
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(customer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(customer.FieldEmail, field.TypeString, value)
	}
	if value, ok := cu.mutation.PhoneNumber(); ok {
		_spec.SetField(customer.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := cu.mutation.FullName(); ok {
		_spec.SetField(customer.FieldFullName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Dob(); ok {
		_spec.SetField(customer.FieldDob, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Cid(); ok {
		_spec.SetField(customer.FieldCid, field.TypeString, value)
	}
	if cu.mutation.HasMemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.HasMemberTable,
			Columns: []string{customer.HasMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.HasMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.HasMemberTable,
			Columns: []string{customer.HasMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.HasFlightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.HasFlightTable,
			Columns: []string{customer.HasFlightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(flight.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedHasFlightIDs(); len(nodes) > 0 && !cu.mutation.HasFlightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.HasFlightTable,
			Columns: []string{customer.HasFlightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(flight.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.HasFlightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.HasFlightTable,
			Columns: []string{customer.HasFlightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(flight.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerMutation
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CustomerUpdateOne) SetCreatedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCreatedAt(t *time.Time) *CustomerUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CustomerUpdateOne) SetUpdatedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *CustomerUpdateOne) SetEmail(s string) *CustomerUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetPhoneNumber sets the "phone_number" field.
func (cuo *CustomerUpdateOne) SetPhoneNumber(s string) *CustomerUpdateOne {
	cuo.mutation.SetPhoneNumber(s)
	return cuo
}

// SetFullName sets the "full_name" field.
func (cuo *CustomerUpdateOne) SetFullName(s string) *CustomerUpdateOne {
	cuo.mutation.SetFullName(s)
	return cuo
}

// SetDob sets the "dob" field.
func (cuo *CustomerUpdateOne) SetDob(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetDob(t)
	return cuo
}

// SetCid sets the "cid" field.
func (cuo *CustomerUpdateOne) SetCid(s string) *CustomerUpdateOne {
	cuo.mutation.SetCid(s)
	return cuo
}

// SetMemberID sets the "member_id" field.
func (cuo *CustomerUpdateOne) SetMemberID(i int) *CustomerUpdateOne {
	cuo.mutation.SetMemberID(i)
	return cuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableMemberID(i *int) *CustomerUpdateOne {
	if i != nil {
		cuo.SetMemberID(*i)
	}
	return cuo
}

// ClearMemberID clears the value of the "member_id" field.
func (cuo *CustomerUpdateOne) ClearMemberID() *CustomerUpdateOne {
	cuo.mutation.ClearMemberID()
	return cuo
}

// SetHasMemberID sets the "has_Member" edge to the Member entity by ID.
func (cuo *CustomerUpdateOne) SetHasMemberID(id int) *CustomerUpdateOne {
	cuo.mutation.SetHasMemberID(id)
	return cuo
}

// SetNillableHasMemberID sets the "has_Member" edge to the Member entity by ID if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableHasMemberID(id *int) *CustomerUpdateOne {
	if id != nil {
		cuo = cuo.SetHasMemberID(*id)
	}
	return cuo
}

// SetHasMember sets the "has_Member" edge to the Member entity.
func (cuo *CustomerUpdateOne) SetHasMember(m *Member) *CustomerUpdateOne {
	return cuo.SetHasMemberID(m.ID)
}

// AddHasFlightIDs adds the "has_Flight" edge to the Flight entity by IDs.
func (cuo *CustomerUpdateOne) AddHasFlightIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddHasFlightIDs(ids...)
	return cuo
}

// AddHasFlight adds the "has_Flight" edges to the Flight entity.
func (cuo *CustomerUpdateOne) AddHasFlight(f ...*Flight) *CustomerUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cuo.AddHasFlightIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// ClearHasMember clears the "has_Member" edge to the Member entity.
func (cuo *CustomerUpdateOne) ClearHasMember() *CustomerUpdateOne {
	cuo.mutation.ClearHasMember()
	return cuo
}

// ClearHasFlight clears all "has_Flight" edges to the Flight entity.
func (cuo *CustomerUpdateOne) ClearHasFlight() *CustomerUpdateOne {
	cuo.mutation.ClearHasFlight()
	return cuo
}

// RemoveHasFlightIDs removes the "has_Flight" edge to Flight entities by IDs.
func (cuo *CustomerUpdateOne) RemoveHasFlightIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveHasFlightIDs(ids...)
	return cuo
}

// RemoveHasFlight removes "has_Flight" edges to Flight entities.
func (cuo *CustomerUpdateOne) RemoveHasFlight(f ...*Flight) *CustomerUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cuo.RemoveHasFlightIDs(ids...)
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cuo *CustomerUpdateOne) Where(ps ...predicate.Customer) *CustomerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CustomerUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := customer.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CustomerUpdateOne) check() error {
	if v, ok := cuo.mutation.Email(); ok {
		if err := customer.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Customer.email": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.PhoneNumber(); ok {
		if err := customer.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Customer.phone_number": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.FullName(); ok {
		if err := customer.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "Customer.full_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Cid(); ok {
		if err := customer.CidValidator(v); err != nil {
			return &ValidationError{Name: "cid", err: fmt.Errorf(`ent: validator failed for field "Customer.cid": %w`, err)}
		}
	}
	return nil
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(customer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(customer.FieldEmail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.PhoneNumber(); ok {
		_spec.SetField(customer.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := cuo.mutation.FullName(); ok {
		_spec.SetField(customer.FieldFullName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Dob(); ok {
		_spec.SetField(customer.FieldDob, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Cid(); ok {
		_spec.SetField(customer.FieldCid, field.TypeString, value)
	}
	if cuo.mutation.HasMemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.HasMemberTable,
			Columns: []string{customer.HasMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.HasMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customer.HasMemberTable,
			Columns: []string{customer.HasMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.HasFlightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.HasFlightTable,
			Columns: []string{customer.HasFlightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(flight.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedHasFlightIDs(); len(nodes) > 0 && !cuo.mutation.HasFlightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.HasFlightTable,
			Columns: []string{customer.HasFlightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(flight.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.HasFlightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.HasFlightTable,
			Columns: []string{customer.HasFlightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(flight.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
