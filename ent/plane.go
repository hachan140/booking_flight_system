// Code generated by ent, DO NOT EDIT.

package ent

import (
	"booking-flight-sytem/ent/plane"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Plane is the model entity for the Plane schema.
type Plane struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EconomyClassSlots holds the value of the "economy_class_slots" field.
	EconomyClassSlots int64 `json:"economy_class_slots,omitempty"`
	// BusinessClassSlots holds the value of the "business_class_slots" field.
	BusinessClassSlots int64 `json:"business_class_slots,omitempty"`
	// Status holds the value of the "status" field.
	Status plane.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaneQuery when eager-loading is set.
	Edges        PlaneEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PlaneEdges holds the relations/edges for other nodes in the graph.
type PlaneEdges struct {
	// PlaneID holds the value of the plane_id edge.
	PlaneID []*Flight `json:"plane_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PlaneIDOrErr returns the PlaneID value or an error if the edge
// was not loaded in eager-loading.
func (e PlaneEdges) PlaneIDOrErr() ([]*Flight, error) {
	if e.loadedTypes[0] {
		return e.PlaneID, nil
	}
	return nil, &NotLoadedError{edge: "plane_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Plane) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case plane.FieldID, plane.FieldEconomyClassSlots, plane.FieldBusinessClassSlots:
			values[i] = new(sql.NullInt64)
		case plane.FieldName, plane.FieldStatus:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Plane fields.
func (pl *Plane) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case plane.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = int(value.Int64)
		case plane.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pl.Name = value.String
			}
		case plane.FieldEconomyClassSlots:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field economy_class_slots", values[i])
			} else if value.Valid {
				pl.EconomyClassSlots = value.Int64
			}
		case plane.FieldBusinessClassSlots:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field business_class_slots", values[i])
			} else if value.Valid {
				pl.BusinessClassSlots = value.Int64
			}
		case plane.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pl.Status = plane.Status(value.String)
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Plane.
// This includes values selected through modifiers, order, etc.
func (pl *Plane) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// QueryPlaneID queries the "plane_id" edge of the Plane entity.
func (pl *Plane) QueryPlaneID() *FlightQuery {
	return NewPlaneClient(pl.config).QueryPlaneID(pl)
}

// Update returns a builder for updating this Plane.
// Note that you need to call Plane.Unwrap() before calling this method if this Plane
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Plane) Update() *PlaneUpdateOne {
	return NewPlaneClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the Plane entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Plane) Unwrap() *Plane {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Plane is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Plane) String() string {
	var builder strings.Builder
	builder.WriteString("Plane(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", ")
	builder.WriteString("economy_class_slots=")
	builder.WriteString(fmt.Sprintf("%v", pl.EconomyClassSlots))
	builder.WriteString(", ")
	builder.WriteString("business_class_slots=")
	builder.WriteString(fmt.Sprintf("%v", pl.BusinessClassSlots))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pl.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Planes is a parsable slice of Plane.
type Planes []*Plane
