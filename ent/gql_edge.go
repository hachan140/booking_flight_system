// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Airport) FromFlight(ctx context.Context) (result []*Flight, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedFromFlight(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.FromFlightOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryFromFlight().All(ctx)
	}
	return result, err
}

func (a *Airport) ToFlight(ctx context.Context) (result []*Flight, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedToFlight(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.ToFlightOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryToFlight().All(ctx)
	}
	return result, err
}

func (b *Booking) HasFlight(ctx context.Context) (*Flight, error) {
	result, err := b.Edges.HasFlightOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryHasFlight().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (b *Booking) HasCustomer(ctx context.Context) (*Customer, error) {
	result, err := b.Edges.HasCustomerOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryHasCustomer().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Customer) HasMember(ctx context.Context) (*Member, error) {
	result, err := c.Edges.HasMemberOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryHasMember().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Customer) HasBooking(ctx context.Context) (result []*Booking, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedHasBooking(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.HasBookingOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryHasBooking().All(ctx)
	}
	return result, err
}

func (f *Flight) HasPlane(ctx context.Context) (*Plane, error) {
	result, err := f.Edges.HasPlaneOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryHasPlane().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (f *Flight) HasBooking(ctx context.Context) (result []*Booking, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = f.NamedHasBooking(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = f.Edges.HasBookingOrErr()
	}
	if IsNotLoaded(err) {
		result, err = f.QueryHasBooking().All(ctx)
	}
	return result, err
}

func (f *Flight) FromAirport(ctx context.Context) (*Airport, error) {
	result, err := f.Edges.FromAirportOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryFromAirport().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (f *Flight) ToAirport(ctx context.Context) (*Airport, error) {
	result, err := f.Edges.ToAirportOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryToAirport().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Member) HasCustomer(ctx context.Context) (*Customer, error) {
	result, err := m.Edges.HasCustomerOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryHasCustomer().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pl *Plane) Flights(ctx context.Context) (result []*Flight, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pl.NamedFlights(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pl.Edges.FlightsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pl.QueryFlights().All(ctx)
	}
	return result, err
}
