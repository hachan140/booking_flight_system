// Code generated by ent, DO NOT EDIT.

package flight

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the flight type in the database.
	Label = "flight"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDepartAt holds the string denoting the depart_at field in the database.
	FieldDepartAt = "depart_at"
	// FieldLandAt holds the string denoting the land_at field in the database.
	FieldLandAt = "land_at"
	// FieldAvailableEcSlot holds the string denoting the available_ec_slot field in the database.
	FieldAvailableEcSlot = "available_ec_slot"
	// FieldAvailableBcSlot holds the string denoting the available_bc_slot field in the database.
	FieldAvailableBcSlot = "available_bc_slot"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeFlightID holds the string denoting the flight_id edge name in mutations.
	EdgeFlightID = "flight_id"
	// Table holds the table name of the flight in the database.
	Table = "flights"
	// FlightIDTable is the table that holds the flight_id relation/edge.
	FlightIDTable = "bookings"
	// FlightIDInverseTable is the table name for the Booking entity.
	// It exists in this package in order to avoid circular dependency with the "booking" package.
	FlightIDInverseTable = "bookings"
	// FlightIDColumn is the table column denoting the flight_id relation/edge.
	FlightIDColumn = "flight_flight_id"
)

// Columns holds all SQL columns for flight fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldDepartAt,
	FieldLandAt,
	FieldAvailableEcSlot,
	FieldAvailableBcSlot,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "flights"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"airport_from_airport_id",
	"airport_dest_airport_id",
	"plane_plane_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// Status defines the type for the "status" enum field.
type Status string

// StatusLanded is the default value of the Status enum.
const DefaultStatus = StatusLanded

// Status values.
const (
	StatusFlying    Status = "flying"
	StatusScheduled Status = "scheduled"
	StatusCanceled  Status = "canceled"
	StatusLanded    Status = "landed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusFlying, StatusScheduled, StatusCanceled, StatusLanded:
		return nil
	default:
		return fmt.Errorf("flight: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Flight queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDepartAt orders the results by the depart_at field.
func ByDepartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartAt, opts...).ToFunc()
}

// ByLandAt orders the results by the land_at field.
func ByLandAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLandAt, opts...).ToFunc()
}

// ByAvailableEcSlot orders the results by the available_ec_slot field.
func ByAvailableEcSlot(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvailableEcSlot, opts...).ToFunc()
}

// ByAvailableBcSlot orders the results by the available_bc_slot field.
func ByAvailableBcSlot(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvailableBcSlot, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByFlightIDCount orders the results by flight_id count.
func ByFlightIDCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFlightIDStep(), opts...)
	}
}

// ByFlightID orders the results by flight_id terms.
func ByFlightID(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFlightIDStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFlightIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FlightIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FlightIDTable, FlightIDColumn),
	)
}
