
type FlightOps{
    create_flight(input:CreateFlight!): Flight! @goField(forceResolver: true)

    update_flight_status(id: Int!,input: UpdateFlightStatus):Flight! @goField(forceResolver: true)
    search_flight(input: SearchFlight!): [Flight!] @goField(forceResolver: true)
    update_flight(input: UpdateFlight!): Flight! @goField(forceResolver: true)
    cancel_flight(id: Int!): String @goField(forceResolver: true)
    find_airport_by_name(name: String!): Airport! @goField(forceResolver: true)
    find_flight_by_id(id: Int!): Flight! @goField(forceResolver: true)
    list_flights(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: FlightOrder): FlightConnection! @goField(forceResolver: true)
}
extend type Mutation {
    flight: FlightOps! @goField(forceResolver: true)
}

input CreateFlight {
    name: String!
    departAt: Time!
    landAt: Time!
    toID: Int!
    fromID: Int!
    planeID: Int!
}

input UpdateFlightStatus{
    status: FlightStatus!
}

input UpdateFlightSlot{
    available_ec_slots: Int!
    available_bc_slots: Int!
}

input SearchFlight{
    from_airport: String!
    to_airport: String!
    depart_at: Time!
}

input UpdateFlight{
    id: Int!
    name: String
    departAt: Time
    landAt: Time
    planeID: Int
}

type FlightConnection{
    edges: [FlightEdge]
    pageInfo: PageInfo
    totalCount: Int!
}

type FlightEdge{
    node: Flight
    cursor: Cursor!
}