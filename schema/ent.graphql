directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Airport implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  lat: Float!
  long: Float!
  fromFlight: [Flight!]
  toFlight: [Flight!]
}
"""
AirportWhereInput is used for filtering Airport objects.
Input was generated by ent.
"""
input AirportWhereInput {
  not: AirportWhereInput
  and: [AirportWhereInput!]
  or: [AirportWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """lat field predicates"""
  lat: Float
  latNEQ: Float
  latIn: [Float!]
  latNotIn: [Float!]
  latGT: Float
  latGTE: Float
  latLT: Float
  latLTE: Float
  """long field predicates"""
  long: Float
  longNEQ: Float
  longIn: [Float!]
  longNotIn: [Float!]
  longGT: Float
  longGTE: Float
  longLT: Float
  longLTE: Float
  """from_flight edge predicates"""
  hasFromFlight: Boolean
  hasFromFlightWith: [FlightWhereInput!]
  """to_flight edge predicates"""
  hasToFlight: Boolean
  hasToFlightWith: [FlightWhereInput!]
}
type Booking implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  code: String!
  status: BookingStatus!
  seatType: BookingSeatType!
  customerID: ID
  flightID: ID
  hasFlight: Flight
  hasCustomer: Customer
}
"""BookingSeatType is enum for the field seat_type"""
enum BookingSeatType @goModel(model: "booking-flight-system/ent/booking.SeatType") {
  ec
  bc
}
"""BookingStatus is enum for the field status"""
enum BookingStatus @goModel(model: "booking-flight-system/ent/booking.Status") {
  success
  cancel
}
"""
BookingWhereInput is used for filtering Booking objects.
Input was generated by ent.
"""
input BookingWhereInput {
  not: BookingWhereInput
  and: [BookingWhereInput!]
  or: [BookingWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """code field predicates"""
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """status field predicates"""
  status: BookingStatus
  statusNEQ: BookingStatus
  statusIn: [BookingStatus!]
  statusNotIn: [BookingStatus!]
  """seat_type field predicates"""
  seatType: BookingSeatType
  seatTypeNEQ: BookingSeatType
  seatTypeIn: [BookingSeatType!]
  seatTypeNotIn: [BookingSeatType!]
  """customer_id field predicates"""
  customerID: ID
  customerIDNEQ: ID
  customerIDIn: [ID!]
  customerIDNotIn: [ID!]
  customerIDIsNil: Boolean
  customerIDNotNil: Boolean
  """flight_id field predicates"""
  flightID: ID
  flightIDNEQ: ID
  flightIDIn: [ID!]
  flightIDNotIn: [ID!]
  flightIDIsNil: Boolean
  flightIDNotNil: Boolean
  """has_flight edge predicates"""
  hasHasFlight: Boolean
  hasHasFlightWith: [FlightWhereInput!]
  """has_customer edge predicates"""
  hasHasCustomer: Boolean
  hasHasCustomerWith: [CustomerWhereInput!]
}
"""
CreateAirportInput is used for create Airport object.
Input was generated by ent.
"""
input CreateAirportInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  lat: Float!
  long: Float!
  fromFlightIDs: [ID!]
  toFlightIDs: [ID!]
}
"""
CreateBookingInput is used for create Booking object.
Input was generated by ent.
"""
input CreateBookingInput {
  createdAt: Time
  updatedAt: Time
  code: String!
  status: BookingStatus!
  seatType: BookingSeatType!
  hasFlightID: ID
  hasCustomerID: ID
}
"""
CreateCustomerInput is used for create Customer object.
Input was generated by ent.
"""
input CreateCustomerInput {
  createdAt: Time
  updatedAt: Time
  email: String!
  phoneNumber: String!
  fullName: String!
  dob: Time
  cid: String!
  hasMemberID: ID
  hasBookingIDs: [ID!]
}
"""
CreateFlightInput is used for create Flight object.
Input was generated by ent.
"""
input CreateFlightInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  departAt: Time!
  landAt: Time!
  availableEcSlot: Int!
  availableBcSlot: Int!
  status: FlightStatus
  hasPlaneID: ID
  hasBookingIDs: [ID!]
  fromAirportID: ID
  toAirportID: ID
}
"""
CreateMemberInput is used for create Member object.
Input was generated by ent.
"""
input CreateMemberInput {
  createdAt: Time
  updatedAt: Time
  email: String!
  password: String!
  phoneNumber: String!
  fullName: String!
  dob: Time
  cid: String!
  role: Int
  hasCustomerID: ID
}
"""
CreatePlaneInput is used for create Plane object.
Input was generated by ent.
"""
input CreatePlaneInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  economyClassSlots: Int
  businessClassSlots: Int
  status: PlaneStatus
  flightIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Customer implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  email: String!
  phoneNumber: String!
  fullName: String!
  dob: Time
  cid: String!
  memberID: ID
  hasMember: Member
  hasBooking: [Booking!]
}
"""
CustomerWhereInput is used for filtering Customer objects.
Input was generated by ent.
"""
input CustomerWhereInput {
  not: CustomerWhereInput
  and: [CustomerWhereInput!]
  or: [CustomerWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """phone_number field predicates"""
  phoneNumber: String
  phoneNumberNEQ: String
  phoneNumberIn: [String!]
  phoneNumberNotIn: [String!]
  phoneNumberGT: String
  phoneNumberGTE: String
  phoneNumberLT: String
  phoneNumberLTE: String
  phoneNumberContains: String
  phoneNumberHasPrefix: String
  phoneNumberHasSuffix: String
  phoneNumberEqualFold: String
  phoneNumberContainsFold: String
  """full_name field predicates"""
  fullName: String
  fullNameNEQ: String
  fullNameIn: [String!]
  fullNameNotIn: [String!]
  fullNameGT: String
  fullNameGTE: String
  fullNameLT: String
  fullNameLTE: String
  fullNameContains: String
  fullNameHasPrefix: String
  fullNameHasSuffix: String
  fullNameEqualFold: String
  fullNameContainsFold: String
  """dob field predicates"""
  dob: Time
  dobNEQ: Time
  dobIn: [Time!]
  dobNotIn: [Time!]
  dobGT: Time
  dobGTE: Time
  dobLT: Time
  dobLTE: Time
  dobIsNil: Boolean
  dobNotNil: Boolean
  """cid field predicates"""
  cid: String
  cidNEQ: String
  cidIn: [String!]
  cidNotIn: [String!]
  cidGT: String
  cidGTE: String
  cidLT: String
  cidLTE: String
  cidContains: String
  cidHasPrefix: String
  cidHasSuffix: String
  cidEqualFold: String
  cidContainsFold: String
  """member_id field predicates"""
  memberID: ID
  memberIDNEQ: ID
  memberIDIn: [ID!]
  memberIDNotIn: [ID!]
  memberIDIsNil: Boolean
  memberIDNotNil: Boolean
  """has_member edge predicates"""
  hasHasMember: Boolean
  hasHasMemberWith: [MemberWhereInput!]
  """has_booking edge predicates"""
  hasHasBooking: Boolean
  hasHasBookingWith: [BookingWhereInput!]
}
type Flight implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  departAt: Time!
  landAt: Time!
  availableEcSlot: Int!
  availableBcSlot: Int!
  status: FlightStatus!
  planeID: ID
  fromAirportID: ID
  toAirportID: ID
  hasPlane: Plane
  hasBooking: [Booking!]
  fromAirport: Airport
  toAirport: Airport
}
"""FlightStatus is enum for the field status"""
enum FlightStatus @goModel(model: "booking-flight-system/ent/flight.Status") {
  flying
  scheduled
  canceled
  landed
}
"""
FlightWhereInput is used for filtering Flight objects.
Input was generated by ent.
"""
input FlightWhereInput {
  not: FlightWhereInput
  and: [FlightWhereInput!]
  or: [FlightWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """depart_at field predicates"""
  departAt: Time
  departAtNEQ: Time
  departAtIn: [Time!]
  departAtNotIn: [Time!]
  departAtGT: Time
  departAtGTE: Time
  departAtLT: Time
  departAtLTE: Time
  """land_at field predicates"""
  landAt: Time
  landAtNEQ: Time
  landAtIn: [Time!]
  landAtNotIn: [Time!]
  landAtGT: Time
  landAtGTE: Time
  landAtLT: Time
  landAtLTE: Time
  """available_ec_slot field predicates"""
  availableEcSlot: Int
  availableEcSlotNEQ: Int
  availableEcSlotIn: [Int!]
  availableEcSlotNotIn: [Int!]
  availableEcSlotGT: Int
  availableEcSlotGTE: Int
  availableEcSlotLT: Int
  availableEcSlotLTE: Int
  """available_bc_slot field predicates"""
  availableBcSlot: Int
  availableBcSlotNEQ: Int
  availableBcSlotIn: [Int!]
  availableBcSlotNotIn: [Int!]
  availableBcSlotGT: Int
  availableBcSlotGTE: Int
  availableBcSlotLT: Int
  availableBcSlotLTE: Int
  """status field predicates"""
  status: FlightStatus
  statusNEQ: FlightStatus
  statusIn: [FlightStatus!]
  statusNotIn: [FlightStatus!]
  """plane_id field predicates"""
  planeID: ID
  planeIDNEQ: ID
  planeIDIn: [ID!]
  planeIDNotIn: [ID!]
  planeIDIsNil: Boolean
  planeIDNotNil: Boolean
  """from_airport_id field predicates"""
  fromAirportID: ID
  fromAirportIDNEQ: ID
  fromAirportIDIn: [ID!]
  fromAirportIDNotIn: [ID!]
  fromAirportIDIsNil: Boolean
  fromAirportIDNotNil: Boolean
  """to_airport_id field predicates"""
  toAirportID: ID
  toAirportIDNEQ: ID
  toAirportIDIn: [ID!]
  toAirportIDNotIn: [ID!]
  toAirportIDIsNil: Boolean
  toAirportIDNotNil: Boolean
  """has_plane edge predicates"""
  hasHasPlane: Boolean
  hasHasPlaneWith: [PlaneWhereInput!]
  """has_booking edge predicates"""
  hasHasBooking: Boolean
  hasHasBookingWith: [BookingWhereInput!]
  """from_airport edge predicates"""
  hasFromAirport: Boolean
  hasFromAirportWith: [AirportWhereInput!]
  """to_airport edge predicates"""
  hasToAirport: Boolean
  hasToAirportWith: [AirportWhereInput!]
}
type Member implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  email: String!
  phoneNumber: String!
  fullName: String!
  dob: Time
  cid: String!
  role: Int!
  hasCustomer: Customer
}
"""
MemberWhereInput is used for filtering Member objects.
Input was generated by ent.
"""
input MemberWhereInput {
  not: MemberWhereInput
  and: [MemberWhereInput!]
  or: [MemberWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """phone_number field predicates"""
  phoneNumber: String
  phoneNumberNEQ: String
  phoneNumberIn: [String!]
  phoneNumberNotIn: [String!]
  phoneNumberGT: String
  phoneNumberGTE: String
  phoneNumberLT: String
  phoneNumberLTE: String
  phoneNumberContains: String
  phoneNumberHasPrefix: String
  phoneNumberHasSuffix: String
  phoneNumberEqualFold: String
  phoneNumberContainsFold: String
  """full_name field predicates"""
  fullName: String
  fullNameNEQ: String
  fullNameIn: [String!]
  fullNameNotIn: [String!]
  fullNameGT: String
  fullNameGTE: String
  fullNameLT: String
  fullNameLTE: String
  fullNameContains: String
  fullNameHasPrefix: String
  fullNameHasSuffix: String
  fullNameEqualFold: String
  fullNameContainsFold: String
  """dob field predicates"""
  dob: Time
  dobNEQ: Time
  dobIn: [Time!]
  dobNotIn: [Time!]
  dobGT: Time
  dobGTE: Time
  dobLT: Time
  dobLTE: Time
  dobIsNil: Boolean
  dobNotNil: Boolean
  """cid field predicates"""
  cid: String
  cidNEQ: String
  cidIn: [String!]
  cidNotIn: [String!]
  cidGT: String
  cidGTE: String
  cidLT: String
  cidLTE: String
  cidContains: String
  cidHasPrefix: String
  cidHasSuffix: String
  cidEqualFold: String
  cidContainsFold: String
  """role field predicates"""
  role: Int
  roleNEQ: Int
  roleIn: [Int!]
  roleNotIn: [Int!]
  roleGT: Int
  roleGTE: Int
  roleLT: Int
  roleLTE: Int
  """has_customer edge predicates"""
  hasHasCustomer: Boolean
  hasHasCustomerWith: [CustomerWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "booking-flight-system/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Plane implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  economyClassSlots: Int!
  businessClassSlots: Int!
  status: PlaneStatus!
  flights: [Flight!]
}
"""PlaneStatus is enum for the field status"""
enum PlaneStatus @goModel(model: "booking-flight-system/ent/plane.Status") {
  booked
  free
}
"""
PlaneWhereInput is used for filtering Plane objects.
Input was generated by ent.
"""
input PlaneWhereInput {
  not: PlaneWhereInput
  and: [PlaneWhereInput!]
  or: [PlaneWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """economy_class_slots field predicates"""
  economyClassSlots: Int
  economyClassSlotsNEQ: Int
  economyClassSlotsIn: [Int!]
  economyClassSlotsNotIn: [Int!]
  economyClassSlotsGT: Int
  economyClassSlotsGTE: Int
  economyClassSlotsLT: Int
  economyClassSlotsLTE: Int
  """business_class_slots field predicates"""
  businessClassSlots: Int
  businessClassSlotsNEQ: Int
  businessClassSlotsIn: [Int!]
  businessClassSlotsNotIn: [Int!]
  businessClassSlotsGT: Int
  businessClassSlotsGTE: Int
  businessClassSlotsLT: Int
  businessClassSlotsLTE: Int
  """status field predicates"""
  status: PlaneStatus
  statusNEQ: PlaneStatus
  statusIn: [PlaneStatus!]
  statusNotIn: [PlaneStatus!]
  """flights edge predicates"""
  hasFlights: Boolean
  hasFlightsWith: [FlightWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  airports: [Airport!]!
  bookings: [Booking!]!
  customers: [Customer!]!
  flights: [Flight!]!
  members: [Member!]!
  planes: [Plane!]!
}
"""The builtin Time type"""
scalar Time
"""
UpdateAirportInput is used for update Airport object.
Input was generated by ent.
"""
input UpdateAirportInput {
  createdAt: Time
  updatedAt: Time
  name: String
  lat: Float
  long: Float
  addFromFlightIDs: [ID!]
  removeFromFlightIDs: [ID!]
  clearFromFlight: Boolean
  addToFlightIDs: [ID!]
  removeToFlightIDs: [ID!]
  clearToFlight: Boolean
}
"""
UpdateBookingInput is used for update Booking object.
Input was generated by ent.
"""
input UpdateBookingInput {
  createdAt: Time
  updatedAt: Time
  code: String
  status: BookingStatus
  seatType: BookingSeatType
  hasFlightID: ID
  clearHasFlight: Boolean
  hasCustomerID: ID
  clearHasCustomer: Boolean
}
"""
UpdateCustomerInput is used for update Customer object.
Input was generated by ent.
"""
input UpdateCustomerInput {
  createdAt: Time
  updatedAt: Time
  email: String
  phoneNumber: String
  fullName: String
  dob: Time
  clearDob: Boolean
  cid: String
  hasMemberID: ID
  clearHasMember: Boolean
  addHasBookingIDs: [ID!]
  removeHasBookingIDs: [ID!]
  clearHasBooking: Boolean
}
"""
UpdateFlightInput is used for update Flight object.
Input was generated by ent.
"""
input UpdateFlightInput {
  createdAt: Time
  updatedAt: Time
  name: String
  departAt: Time
  landAt: Time
  availableEcSlot: Int
  availableBcSlot: Int
  status: FlightStatus
  hasPlaneID: ID
  clearHasPlane: Boolean
  addHasBookingIDs: [ID!]
  removeHasBookingIDs: [ID!]
  clearHasBooking: Boolean
  fromAirportID: ID
  clearFromAirport: Boolean
  toAirportID: ID
  clearToAirport: Boolean
}
"""
UpdateMemberInput is used for update Member object.
Input was generated by ent.
"""
input UpdateMemberInput {
  createdAt: Time
  updatedAt: Time
  email: String
  password: String
  phoneNumber: String
  fullName: String
  dob: Time
  clearDob: Boolean
  cid: String
  role: Int
  hasCustomerID: ID
  clearHasCustomer: Boolean
}
"""
UpdatePlaneInput is used for update Plane object.
Input was generated by ent.
"""
input UpdatePlaneInput {
  createdAt: Time
  updatedAt: Time
  name: String
  economyClassSlots: Int
  businessClassSlots: Int
  status: PlaneStatus
  addFlightIDs: [ID!]
  removeFlightIDs: [ID!]
  clearFlights: Boolean
}
