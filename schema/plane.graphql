type PlaneOps{
    create_plane(input:CreatePlaneInput!): Plane! @goField(forceResolver: true)
    update_plane(id:Int!, input: UpdatePlaneInput!): Plane! @goField(forceResolver: true)
    delete_plane(id:Int!): String @goField(forceResolver: true)
    find_plane_by_id(id: Int!): Plane! @goField(forceResolver: true)
    list_planes(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: PlaneOrder): PlaneConnection! @goField(forceResolver: true)
}

extend type Mutation {
    plane: PlaneOps! @goField(forceResolver: true)
}

type PlaneConnection{
    edges: [PlaneEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type PlaneEdge{
    node: Member
    cursor: Cursor!
}
